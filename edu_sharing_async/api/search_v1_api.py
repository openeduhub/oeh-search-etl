# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from edu_sharing_async.api_client import ApiClient


class SEARCHV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_relevant_nodes(self, repository, **kwargs):  # noqa: E501
        """Get relevant nodes for the current user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_relevant_nodes(repository, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param list[str] property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :param int max_items: maximum items per page
        :param int skip_count: skip a number of items
        :return: SearchResultNode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_relevant_nodes_with_http_info(repository, **kwargs)  # noqa: E501
        else:
            (data) = self.get_relevant_nodes_with_http_info(repository, **kwargs)  # noqa: E501
            return data

    def get_relevant_nodes_with_http_info(self, repository, **kwargs):  # noqa: E501
        """Get relevant nodes for the current user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_relevant_nodes_with_http_info(repository, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param list[str] property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :param int max_items: maximum items per page
        :param int skip_count: skip a number of items
        :return: SearchResultNode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository', 'property_filter', 'max_items', 'skip_count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_relevant_nodes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `get_relevant_nodes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501

        query_params = []
        if 'property_filter' in params:
            query_params.append(('propertyFilter', params['property_filter']))  # noqa: E501
            collection_formats['propertyFilter'] = 'multi'  # noqa: E501
        if 'max_items' in params:
            query_params.append(('maxItems', params['max_items']))  # noqa: E501
        if 'skip_count' in params:
            query_params.append(('skipCount', params['skip_count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/search/v1/relevant/{repository}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchResultNode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def load_save_search(self, node_id, **kwargs):  # noqa: E501
        """Load a saved search query.  # noqa: E501

        Load a saved search query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.load_save_search(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: Node id of the search item (required)
        :param list[str] body: facettes
        :param str content_type: Type of element
        :param int max_items: maximum items per page
        :param int skip_count: skip a number of items
        :param list[str] sort_properties: sort properties
        :param list[bool] sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :param list[str] property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.load_save_search_with_http_info(node_id, **kwargs)  # noqa: E501
        else:
            (data) = self.load_save_search_with_http_info(node_id, **kwargs)  # noqa: E501
            return data

    def load_save_search_with_http_info(self, node_id, **kwargs):  # noqa: E501
        """Load a saved search query.  # noqa: E501

        Load a saved search query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.load_save_search_with_http_info(node_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str node_id: Node id of the search item (required)
        :param list[str] body: facettes
        :param str content_type: Type of element
        :param int max_items: maximum items per page
        :param int skip_count: skip a number of items
        :param list[str] sort_properties: sort properties
        :param list[bool] sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :param list[str] property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :return: Node
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['node_id', 'body', 'content_type', 'max_items', 'skip_count', 'sort_properties', 'sort_ascending', 'property_filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method load_save_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'node_id' is set
        if ('node_id' not in params or
                params['node_id'] is None):
            raise ValueError("Missing the required parameter `node_id` when calling `load_save_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'node_id' in params:
            path_params['nodeId'] = params['node_id']  # noqa: E501

        query_params = []
        if 'content_type' in params:
            query_params.append(('contentType', params['content_type']))  # noqa: E501
        if 'max_items' in params:
            query_params.append(('maxItems', params['max_items']))  # noqa: E501
        if 'skip_count' in params:
            query_params.append(('skipCount', params['skip_count']))  # noqa: E501
        if 'sort_properties' in params:
            query_params.append(('sortProperties', params['sort_properties']))  # noqa: E501
            collection_formats['sortProperties'] = 'multi'  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sortAscending', params['sort_ascending']))  # noqa: E501
            collection_formats['sortAscending'] = 'multi'  # noqa: E501
        if 'property_filter' in params:
            query_params.append(('propertyFilter', params['property_filter']))  # noqa: E501
            collection_formats['propertyFilter'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/search/v1/queriesV2/load/{nodeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Node',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_search(self, body, name, repository, metadataset, query, **kwargs):  # noqa: E501
        """Save a search query.  # noqa: E501

        Save a search query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_search(body, name, repository, metadataset, query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MdsQueryCriteria] body: search parameters (required)
        :param str name: Name of the new search item (required)
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str metadataset: ID of metadataset (or \"-default-\" for default metadata set) (required)
        :param str query: ID of query (required)
        :param bool replace: Replace if search with the same name exists
        :return: NodeEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.save_search_with_http_info(body, name, repository, metadataset, query, **kwargs)  # noqa: E501
        else:
            (data) = self.save_search_with_http_info(body, name, repository, metadataset, query, **kwargs)  # noqa: E501
            return data

    def save_search_with_http_info(self, body, name, repository, metadataset, query, **kwargs):  # noqa: E501
        """Save a search query.  # noqa: E501

        Save a search query.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_search_with_http_info(body, name, repository, metadataset, query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MdsQueryCriteria] body: search parameters (required)
        :param str name: Name of the new search item (required)
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str metadataset: ID of metadataset (or \"-default-\" for default metadata set) (required)
        :param str query: ID of query (required)
        :param bool replace: Replace if search with the same name exists
        :return: NodeEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'name', 'repository', 'metadataset', 'query', 'replace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `save_search`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `save_search`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `save_search`")  # noqa: E501
        # verify the required parameter 'metadataset' is set
        if ('metadataset' not in params or
                params['metadataset'] is None):
            raise ValueError("Missing the required parameter `metadataset` when calling `save_search`")  # noqa: E501
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `save_search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'metadataset' in params:
            path_params['metadataset'] = params['metadataset']  # noqa: E501
        if 'query' in params:
            path_params['query'] = params['query']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'replace' in params:
            query_params.append(('replace', params['replace']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/search/v1/queriesV2/{repository}/{metadataset}/{query}/save', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_by_property(self, repository, **kwargs):  # noqa: E501
        """Search for custom properties with custom values  # noqa: E501

        e.g. property=cm:name, value:*Test*  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_by_property(repository, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str content_type: Type of element
        :param str combine_mode: Combine mode, AND or OR, defaults to AND
        :param list[str] _property: One (or more) properties to search for, will be combined by specified combine mode
        :param list[str] value: One (or more) values to search for, matching the properties defined before
        :param list[str] comparator: (Optional) comparator, only relevant for date or numerical fields, currently allowed =, <=, >=
        :param int max_items: maximum items per page
        :param int skip_count: skip a number of items
        :param list[str] sort_properties: sort properties
        :param list[bool] sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :param list[str] property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :return: SearchResultNode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_by_property_with_http_info(repository, **kwargs)  # noqa: E501
        else:
            (data) = self.search_by_property_with_http_info(repository, **kwargs)  # noqa: E501
            return data

    def search_by_property_with_http_info(self, repository, **kwargs):  # noqa: E501
        """Search for custom properties with custom values  # noqa: E501

        e.g. property=cm:name, value:*Test*  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_by_property_with_http_info(repository, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str content_type: Type of element
        :param str combine_mode: Combine mode, AND or OR, defaults to AND
        :param list[str] _property: One (or more) properties to search for, will be combined by specified combine mode
        :param list[str] value: One (or more) values to search for, matching the properties defined before
        :param list[str] comparator: (Optional) comparator, only relevant for date or numerical fields, currently allowed =, <=, >=
        :param int max_items: maximum items per page
        :param int skip_count: skip a number of items
        :param list[str] sort_properties: sort properties
        :param list[bool] sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :param list[str] property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :return: SearchResultNode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository', 'content_type', 'combine_mode', '_property', 'value', 'comparator', 'max_items', 'skip_count', 'sort_properties', 'sort_ascending', 'property_filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_by_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `search_by_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501

        query_params = []
        if 'content_type' in params:
            query_params.append(('contentType', params['content_type']))  # noqa: E501
        if 'combine_mode' in params:
            query_params.append(('combineMode', params['combine_mode']))  # noqa: E501
        if '_property' in params:
            query_params.append(('property', params['_property']))  # noqa: E501
            collection_formats['property'] = 'multi'  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501
            collection_formats['value'] = 'multi'  # noqa: E501
        if 'comparator' in params:
            query_params.append(('comparator', params['comparator']))  # noqa: E501
            collection_formats['comparator'] = 'multi'  # noqa: E501
        if 'max_items' in params:
            query_params.append(('maxItems', params['max_items']))  # noqa: E501
        if 'skip_count' in params:
            query_params.append(('skipCount', params['skip_count']))  # noqa: E501
        if 'sort_properties' in params:
            query_params.append(('sortProperties', params['sort_properties']))  # noqa: E501
            collection_formats['sortProperties'] = 'multi'  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sortAscending', params['sort_ascending']))  # noqa: E501
            collection_formats['sortAscending'] = 'multi'  # noqa: E501
        if 'property_filter' in params:
            query_params.append(('propertyFilter', params['property_filter']))  # noqa: E501
            collection_formats['propertyFilter'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/search/v1/custom/{repository}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchResultNode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_contributor(self, repository, search_word, contributor_kind, **kwargs):  # noqa: E501
        """Search for contributors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_contributor(repository, search_word, contributor_kind, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str search_word: search word (required)
        :param str contributor_kind: contributor kind (required)
        :param list[str] fields: define which authority fields should be searched: ['firstname', 'lastname', 'email', 'uuid', 'url']
        :param list[str] contributor_properties: define which contributor props should be searched: ['ccm:lifecyclecontributer_author', 'ccm:lifecyclecontributer_publisher', ..., 'ccm:metadatacontributer_creator', 'ccm:metadatacontributer_validator']
        :return: list[SearchVCard]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_contributor_with_http_info(repository, search_word, contributor_kind, **kwargs)  # noqa: E501
        else:
            (data) = self.search_contributor_with_http_info(repository, search_word, contributor_kind, **kwargs)  # noqa: E501
            return data

    def search_contributor_with_http_info(self, repository, search_word, contributor_kind, **kwargs):  # noqa: E501
        """Search for contributors  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_contributor_with_http_info(repository, search_word, contributor_kind, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str search_word: search word (required)
        :param str contributor_kind: contributor kind (required)
        :param list[str] fields: define which authority fields should be searched: ['firstname', 'lastname', 'email', 'uuid', 'url']
        :param list[str] contributor_properties: define which contributor props should be searched: ['ccm:lifecyclecontributer_author', 'ccm:lifecyclecontributer_publisher', ..., 'ccm:metadatacontributer_creator', 'ccm:metadatacontributer_validator']
        :return: list[SearchVCard]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository', 'search_word', 'contributor_kind', 'fields', 'contributor_properties']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_contributor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `search_contributor`")  # noqa: E501
        # verify the required parameter 'search_word' is set
        if ('search_word' not in params or
                params['search_word'] is None):
            raise ValueError("Missing the required parameter `search_word` when calling `search_contributor`")  # noqa: E501
        # verify the required parameter 'contributor_kind' is set
        if ('contributor_kind' not in params or
                params['contributor_kind'] is None):
            raise ValueError("Missing the required parameter `contributor_kind` when calling `search_contributor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501

        query_params = []
        if 'search_word' in params:
            query_params.append(('searchWord', params['search_word']))  # noqa: E501
        if 'contributor_kind' in params:
            query_params.append(('contributorKind', params['contributor_kind']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'contributor_properties' in params:
            query_params.append(('contributorProperties', params['contributor_properties']))  # noqa: E501
            collection_formats['contributorProperties'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/search/v1/queriesV2/{repository}/contributor', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SearchVCard]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_fingerprint(self, repository, nodeid, **kwargs):  # noqa: E501
        """Perform queries based on metadata sets.  # noqa: E501

        Perform queries based on metadata sets.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_fingerprint(repository, nodeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str nodeid: nodeid (required)
        :param int max_items: maximum items per page
        :param int skip_count: skip a number of items
        :param list[str] sort_properties: sort properties
        :param list[bool] sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :param list[str] property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :return: SearchResultNode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_fingerprint_with_http_info(repository, nodeid, **kwargs)  # noqa: E501
        else:
            (data) = self.search_fingerprint_with_http_info(repository, nodeid, **kwargs)  # noqa: E501
            return data

    def search_fingerprint_with_http_info(self, repository, nodeid, **kwargs):  # noqa: E501
        """Perform queries based on metadata sets.  # noqa: E501

        Perform queries based on metadata sets.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_fingerprint_with_http_info(repository, nodeid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str nodeid: nodeid (required)
        :param int max_items: maximum items per page
        :param int skip_count: skip a number of items
        :param list[str] sort_properties: sort properties
        :param list[bool] sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :param list[str] property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :return: SearchResultNode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository', 'nodeid', 'max_items', 'skip_count', 'sort_properties', 'sort_ascending', 'property_filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_fingerprint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `search_fingerprint`")  # noqa: E501
        # verify the required parameter 'nodeid' is set
        if ('nodeid' not in params or
                params['nodeid'] is None):
            raise ValueError("Missing the required parameter `nodeid` when calling `search_fingerprint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'nodeid' in params:
            path_params['nodeid'] = params['nodeid']  # noqa: E501

        query_params = []
        if 'max_items' in params:
            query_params.append(('maxItems', params['max_items']))  # noqa: E501
        if 'skip_count' in params:
            query_params.append(('skipCount', params['skip_count']))  # noqa: E501
        if 'sort_properties' in params:
            query_params.append(('sortProperties', params['sort_properties']))  # noqa: E501
            collection_formats['sortProperties'] = 'multi'  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sortAscending', params['sort_ascending']))  # noqa: E501
            collection_formats['sortAscending'] = 'multi'  # noqa: E501
        if 'property_filter' in params:
            query_params.append(('propertyFilter', params['property_filter']))  # noqa: E501
            collection_formats['propertyFilter'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/search/v1/queries/{repository}/fingerprint/{nodeid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchResultNode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_v2(self, body, repository, metadataset, query, **kwargs):  # noqa: E501
        """Perform queries based on metadata sets V2.  # noqa: E501

        Perform queries based on metadata sets V2.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_v2(body, repository, metadataset, query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchParameters body: search parameters (required)
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str metadataset: ID of metadataset (or \"-default-\" for default metadata set) (required)
        :param str query: ID of query (required)
        :param str content_type: Type of element
        :param int max_items: maximum items per page
        :param int skip_count: skip a number of items
        :param list[str] sort_properties: sort properties
        :param list[bool] sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :param list[str] property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :return: SearchResultNode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_v2_with_http_info(body, repository, metadataset, query, **kwargs)  # noqa: E501
        else:
            (data) = self.search_v2_with_http_info(body, repository, metadataset, query, **kwargs)  # noqa: E501
            return data

    def search_v2_with_http_info(self, body, repository, metadataset, query, **kwargs):  # noqa: E501
        """Perform queries based on metadata sets V2.  # noqa: E501

        Perform queries based on metadata sets V2.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_v2_with_http_info(body, repository, metadataset, query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchParameters body: search parameters (required)
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str metadataset: ID of metadataset (or \"-default-\" for default metadata set) (required)
        :param str query: ID of query (required)
        :param str content_type: Type of element
        :param int max_items: maximum items per page
        :param int skip_count: skip a number of items
        :param list[str] sort_properties: sort properties
        :param list[bool] sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :param list[str] property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :return: SearchResultNode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'repository', 'metadataset', 'query', 'content_type', 'max_items', 'skip_count', 'sort_properties', 'sort_ascending', 'property_filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `search_v2`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `search_v2`")  # noqa: E501
        # verify the required parameter 'metadataset' is set
        if ('metadataset' not in params or
                params['metadataset'] is None):
            raise ValueError("Missing the required parameter `metadataset` when calling `search_v2`")  # noqa: E501
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `search_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'metadataset' in params:
            path_params['metadataset'] = params['metadataset']  # noqa: E501
        if 'query' in params:
            path_params['query'] = params['query']  # noqa: E501

        query_params = []
        if 'content_type' in params:
            query_params.append(('contentType', params['content_type']))  # noqa: E501
        if 'max_items' in params:
            query_params.append(('maxItems', params['max_items']))  # noqa: E501
        if 'skip_count' in params:
            query_params.append(('skipCount', params['skip_count']))  # noqa: E501
        if 'sort_properties' in params:
            query_params.append(('sortProperties', params['sort_properties']))  # noqa: E501
            collection_formats['sortProperties'] = 'multi'  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sortAscending', params['sort_ascending']))  # noqa: E501
            collection_formats['sortAscending'] = 'multi'  # noqa: E501
        if 'property_filter' in params:
            query_params.append(('propertyFilter', params['property_filter']))  # noqa: E501
            collection_formats['propertyFilter'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/search/v1/queriesV2/{repository}/{metadataset}/{query}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchResultNode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
