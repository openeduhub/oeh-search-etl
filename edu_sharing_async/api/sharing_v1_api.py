# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from edu_sharing_async.api_client import ApiClient


class SHARINGV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_children(self, repository, node, share, **kwargs):  # noqa: E501
        """Get all children of this share.  # noqa: E501

        Only valid for shared folders  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_children(repository, node, share, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str node: ID of node (required)
        :param str share: Share token (required)
        :param str password: Password (required if share is locked)
        :param int max_items: maximum items per page
        :param int skip_count: skip a number of items
        :param list[str] sort_properties: sort properties
        :param list[bool] sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :return: NodeEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_children_with_http_info(repository, node, share, **kwargs)  # noqa: E501
        else:
            (data) = self.get_children_with_http_info(repository, node, share, **kwargs)  # noqa: E501
            return data

    def get_children_with_http_info(self, repository, node, share, **kwargs):  # noqa: E501
        """Get all children of this share.  # noqa: E501

        Only valid for shared folders  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_children_with_http_info(repository, node, share, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str node: ID of node (required)
        :param str share: Share token (required)
        :param str password: Password (required if share is locked)
        :param int max_items: maximum items per page
        :param int skip_count: skip a number of items
        :param list[str] sort_properties: sort properties
        :param list[bool] sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :return: NodeEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository', 'node', 'share', 'password', 'max_items', 'skip_count', 'sort_properties', 'sort_ascending']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_children" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `get_children`")  # noqa: E501
        # verify the required parameter 'node' is set
        if ('node' not in params or
                params['node'] is None):
            raise ValueError("Missing the required parameter `node` when calling `get_children`")  # noqa: E501
        # verify the required parameter 'share' is set
        if ('share' not in params or
                params['share'] is None):
            raise ValueError("Missing the required parameter `share` when calling `get_children`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'node' in params:
            path_params['node'] = params['node']  # noqa: E501
        if 'share' in params:
            path_params['share'] = params['share']  # noqa: E501

        query_params = []
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501
        if 'max_items' in params:
            query_params.append(('maxItems', params['max_items']))  # noqa: E501
        if 'skip_count' in params:
            query_params.append(('skipCount', params['skip_count']))  # noqa: E501
        if 'sort_properties' in params:
            query_params.append(('sortProperties', params['sort_properties']))  # noqa: E501
            collection_formats['sortProperties'] = 'multi'  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sortAscending', params['sort_ascending']))  # noqa: E501
            collection_formats['sortAscending'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sharing/v1/sharing/{repository}/{node}/{share}/children', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeEntries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_info(self, repository, node, share, **kwargs):  # noqa: E501
        """Get general info of a share.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_info(repository, node, share, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str node: ID of node (required)
        :param str share: Share token (required)
        :param str password: Password to validate (optional)
        :return: SharingInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_info_with_http_info(repository, node, share, **kwargs)  # noqa: E501
        else:
            (data) = self.get_info_with_http_info(repository, node, share, **kwargs)  # noqa: E501
            return data

    def get_info_with_http_info(self, repository, node, share, **kwargs):  # noqa: E501
        """Get general info of a share.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_info_with_http_info(repository, node, share, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str node: ID of node (required)
        :param str share: Share token (required)
        :param str password: Password to validate (optional)
        :return: SharingInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository', 'node', 'share', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `get_info`")  # noqa: E501
        # verify the required parameter 'node' is set
        if ('node' not in params or
                params['node'] is None):
            raise ValueError("Missing the required parameter `node` when calling `get_info`")  # noqa: E501
        # verify the required parameter 'share' is set
        if ('share' not in params or
                params['share'] is None):
            raise ValueError("Missing the required parameter `share` when calling `get_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'node' in params:
            path_params['node'] = params['node']  # noqa: E501
        if 'share' in params:
            path_params['share'] = params['share']  # noqa: E501

        query_params = []
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sharing/v1/sharing/{repository}/{node}/{share}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SharingInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
