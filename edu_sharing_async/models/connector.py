# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Connector(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'icon': 'str',
        'show_new': 'bool',
        'parameters': 'list[str]',
        'filetypes': 'list[ConnectorFileType]',
        'only_desktop': 'bool',
        'has_view_mode': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'icon': 'icon',
        'show_new': 'showNew',
        'parameters': 'parameters',
        'filetypes': 'filetypes',
        'only_desktop': 'onlyDesktop',
        'has_view_mode': 'hasViewMode'
    }

    def __init__(self, id=None, icon=None, show_new=False, parameters=None, filetypes=None, only_desktop=False, has_view_mode=False):  # noqa: E501
        """Connector - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._icon = None
        self._show_new = None
        self._parameters = None
        self._filetypes = None
        self._only_desktop = None
        self._has_view_mode = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if icon is not None:
            self.icon = icon
        self.show_new = show_new
        if parameters is not None:
            self.parameters = parameters
        if filetypes is not None:
            self.filetypes = filetypes
        if only_desktop is not None:
            self.only_desktop = only_desktop
        if has_view_mode is not None:
            self.has_view_mode = has_view_mode

    @property
    def id(self):
        """Gets the id of this Connector.  # noqa: E501


        :return: The id of this Connector.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Connector.


        :param id: The id of this Connector.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def icon(self):
        """Gets the icon of this Connector.  # noqa: E501


        :return: The icon of this Connector.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this Connector.


        :param icon: The icon of this Connector.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def show_new(self):
        """Gets the show_new of this Connector.  # noqa: E501

        false  # noqa: E501

        :return: The show_new of this Connector.  # noqa: E501
        :rtype: bool
        """
        return self._show_new

    @show_new.setter
    def show_new(self, show_new):
        """Sets the show_new of this Connector.

        false  # noqa: E501

        :param show_new: The show_new of this Connector.  # noqa: E501
        :type: bool
        """
        if show_new is None:
            raise ValueError("Invalid value for `show_new`, must not be `None`")  # noqa: E501

        self._show_new = show_new

    @property
    def parameters(self):
        """Gets the parameters of this Connector.  # noqa: E501


        :return: The parameters of this Connector.  # noqa: E501
        :rtype: list[str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Connector.


        :param parameters: The parameters of this Connector.  # noqa: E501
        :type: list[str]
        """

        self._parameters = parameters

    @property
    def filetypes(self):
        """Gets the filetypes of this Connector.  # noqa: E501


        :return: The filetypes of this Connector.  # noqa: E501
        :rtype: list[ConnectorFileType]
        """
        return self._filetypes

    @filetypes.setter
    def filetypes(self, filetypes):
        """Sets the filetypes of this Connector.


        :param filetypes: The filetypes of this Connector.  # noqa: E501
        :type: list[ConnectorFileType]
        """

        self._filetypes = filetypes

    @property
    def only_desktop(self):
        """Gets the only_desktop of this Connector.  # noqa: E501


        :return: The only_desktop of this Connector.  # noqa: E501
        :rtype: bool
        """
        return self._only_desktop

    @only_desktop.setter
    def only_desktop(self, only_desktop):
        """Sets the only_desktop of this Connector.


        :param only_desktop: The only_desktop of this Connector.  # noqa: E501
        :type: bool
        """

        self._only_desktop = only_desktop

    @property
    def has_view_mode(self):
        """Gets the has_view_mode of this Connector.  # noqa: E501


        :return: The has_view_mode of this Connector.  # noqa: E501
        :rtype: bool
        """
        return self._has_view_mode

    @has_view_mode.setter
    def has_view_mode(self, has_view_mode):
        """Sets the has_view_mode of this Connector.


        :param has_view_mode: The has_view_mode of this Connector.  # noqa: E501
        :type: bool
        """

        self._has_view_mode = has_view_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Connector, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Connector):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
