# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'properties': 'dict(str, list[str])',
        'status': 'UserStatus',
        'organizations': 'list[Organization]',
        'quota': 'UserQuota',
        'authority_name': 'str',
        'authority_type': 'str',
        'user_name': 'str',
        'profile': 'UserProfile',
        'home_folder': 'NodeRef',
        'shared_folders': 'list[NodeRef]'
    }

    attribute_map = {
        'properties': 'properties',
        'status': 'status',
        'organizations': 'organizations',
        'quota': 'quota',
        'authority_name': 'authorityName',
        'authority_type': 'authorityType',
        'user_name': 'userName',
        'profile': 'profile',
        'home_folder': 'homeFolder',
        'shared_folders': 'sharedFolders'
    }

    def __init__(self, properties=None, status=None, organizations=None, quota=None, authority_name=None, authority_type=None, user_name=None, profile=None, home_folder=None, shared_folders=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._properties = None
        self._status = None
        self._organizations = None
        self._quota = None
        self._authority_name = None
        self._authority_type = None
        self._user_name = None
        self._profile = None
        self._home_folder = None
        self._shared_folders = None
        self.discriminator = None
        if properties is not None:
            self.properties = properties
        if status is not None:
            self.status = status
        if organizations is not None:
            self.organizations = organizations
        if quota is not None:
            self.quota = quota
        self.authority_name = authority_name
        if authority_type is not None:
            self.authority_type = authority_type
        if user_name is not None:
            self.user_name = user_name
        if profile is not None:
            self.profile = profile
        self.home_folder = home_folder
        if shared_folders is not None:
            self.shared_folders = shared_folders

    @property
    def properties(self):
        """Gets the properties of this User.  # noqa: E501


        :return: The properties of this User.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this User.


        :param properties: The properties of this User.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._properties = properties

    @property
    def status(self):
        """Gets the status of this User.  # noqa: E501


        :return: The status of this User.  # noqa: E501
        :rtype: UserStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this User.


        :param status: The status of this User.  # noqa: E501
        :type: UserStatus
        """

        self._status = status

    @property
    def organizations(self):
        """Gets the organizations of this User.  # noqa: E501


        :return: The organizations of this User.  # noqa: E501
        :rtype: list[Organization]
        """
        return self._organizations

    @organizations.setter
    def organizations(self, organizations):
        """Sets the organizations of this User.


        :param organizations: The organizations of this User.  # noqa: E501
        :type: list[Organization]
        """

        self._organizations = organizations

    @property
    def quota(self):
        """Gets the quota of this User.  # noqa: E501


        :return: The quota of this User.  # noqa: E501
        :rtype: UserQuota
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """Sets the quota of this User.


        :param quota: The quota of this User.  # noqa: E501
        :type: UserQuota
        """

        self._quota = quota

    @property
    def authority_name(self):
        """Gets the authority_name of this User.  # noqa: E501


        :return: The authority_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._authority_name

    @authority_name.setter
    def authority_name(self, authority_name):
        """Sets the authority_name of this User.


        :param authority_name: The authority_name of this User.  # noqa: E501
        :type: str
        """
        if authority_name is None:
            raise ValueError("Invalid value for `authority_name`, must not be `None`")  # noqa: E501

        self._authority_name = authority_name

    @property
    def authority_type(self):
        """Gets the authority_type of this User.  # noqa: E501


        :return: The authority_type of this User.  # noqa: E501
        :rtype: str
        """
        return self._authority_type

    @authority_type.setter
    def authority_type(self, authority_type):
        """Sets the authority_type of this User.


        :param authority_type: The authority_type of this User.  # noqa: E501
        :type: str
        """
        allowed_values = ["USER", "GROUP", "OWNER", "EVERYONE", "GUEST"]  # noqa: E501
        if authority_type not in allowed_values:
            raise ValueError(
                "Invalid value for `authority_type` ({0}), must be one of {1}"  # noqa: E501
                .format(authority_type, allowed_values)
            )

        self._authority_type = authority_type

    @property
    def user_name(self):
        """Gets the user_name of this User.  # noqa: E501


        :return: The user_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this User.


        :param user_name: The user_name of this User.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def profile(self):
        """Gets the profile of this User.  # noqa: E501


        :return: The profile of this User.  # noqa: E501
        :rtype: UserProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this User.


        :param profile: The profile of this User.  # noqa: E501
        :type: UserProfile
        """

        self._profile = profile

    @property
    def home_folder(self):
        """Gets the home_folder of this User.  # noqa: E501


        :return: The home_folder of this User.  # noqa: E501
        :rtype: NodeRef
        """
        return self._home_folder

    @home_folder.setter
    def home_folder(self, home_folder):
        """Sets the home_folder of this User.


        :param home_folder: The home_folder of this User.  # noqa: E501
        :type: NodeRef
        """
        if home_folder is None:
            raise ValueError("Invalid value for `home_folder`, must not be `None`")  # noqa: E501

        self._home_folder = home_folder

    @property
    def shared_folders(self):
        """Gets the shared_folders of this User.  # noqa: E501


        :return: The shared_folders of this User.  # noqa: E501
        :rtype: list[NodeRef]
        """
        return self._shared_folders

    @shared_folders.setter
    def shared_folders(self, shared_folders):
        """Sets the shared_folders of this User.


        :param shared_folders: The shared_folders of this User.  # noqa: E501
        :type: list[NodeRef]
        """

        self._shared_folders = shared_folders

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
