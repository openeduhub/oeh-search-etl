# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NodeShare(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'password': 'bool',
        'token': 'str',
        'email': 'str',
        'expiry_date': 'int',
        'invited_at': 'int',
        'download_count': 'int',
        'url': 'str',
        'share_id': 'str'
    }

    attribute_map = {
        'password': 'password',
        'token': 'token',
        'email': 'email',
        'expiry_date': 'expiryDate',
        'invited_at': 'invitedAt',
        'download_count': 'downloadCount',
        'url': 'url',
        'share_id': 'shareId'
    }

    def __init__(self, password=False, token=None, email=None, expiry_date=None, invited_at=None, download_count=None, url=None, share_id=None):  # noqa: E501
        """NodeShare - a model defined in Swagger"""  # noqa: E501
        self._password = None
        self._token = None
        self._email = None
        self._expiry_date = None
        self._invited_at = None
        self._download_count = None
        self._url = None
        self._share_id = None
        self.discriminator = None
        if password is not None:
            self.password = password
        if token is not None:
            self.token = token
        if email is not None:
            self.email = email
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if invited_at is not None:
            self.invited_at = invited_at
        if download_count is not None:
            self.download_count = download_count
        if url is not None:
            self.url = url
        if share_id is not None:
            self.share_id = share_id

    @property
    def password(self):
        """Gets the password of this NodeShare.  # noqa: E501


        :return: The password of this NodeShare.  # noqa: E501
        :rtype: bool
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this NodeShare.


        :param password: The password of this NodeShare.  # noqa: E501
        :type: bool
        """

        self._password = password

    @property
    def token(self):
        """Gets the token of this NodeShare.  # noqa: E501


        :return: The token of this NodeShare.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this NodeShare.


        :param token: The token of this NodeShare.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def email(self):
        """Gets the email of this NodeShare.  # noqa: E501


        :return: The email of this NodeShare.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this NodeShare.


        :param email: The email of this NodeShare.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def expiry_date(self):
        """Gets the expiry_date of this NodeShare.  # noqa: E501


        :return: The expiry_date of this NodeShare.  # noqa: E501
        :rtype: int
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this NodeShare.


        :param expiry_date: The expiry_date of this NodeShare.  # noqa: E501
        :type: int
        """

        self._expiry_date = expiry_date

    @property
    def invited_at(self):
        """Gets the invited_at of this NodeShare.  # noqa: E501


        :return: The invited_at of this NodeShare.  # noqa: E501
        :rtype: int
        """
        return self._invited_at

    @invited_at.setter
    def invited_at(self, invited_at):
        """Sets the invited_at of this NodeShare.


        :param invited_at: The invited_at of this NodeShare.  # noqa: E501
        :type: int
        """

        self._invited_at = invited_at

    @property
    def download_count(self):
        """Gets the download_count of this NodeShare.  # noqa: E501


        :return: The download_count of this NodeShare.  # noqa: E501
        :rtype: int
        """
        return self._download_count

    @download_count.setter
    def download_count(self, download_count):
        """Sets the download_count of this NodeShare.


        :param download_count: The download_count of this NodeShare.  # noqa: E501
        :type: int
        """

        self._download_count = download_count

    @property
    def url(self):
        """Gets the url of this NodeShare.  # noqa: E501


        :return: The url of this NodeShare.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this NodeShare.


        :param url: The url of this NodeShare.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def share_id(self):
        """Gets the share_id of this NodeShare.  # noqa: E501


        :return: The share_id of this NodeShare.  # noqa: E501
        :rtype: str
        """
        return self._share_id

    @share_id.setter
    def share_id(self, share_id):
        """Sets the share_id of this NodeShare.


        :param share_id: The share_id of this NodeShare.  # noqa: E501
        :type: str
        """

        self._share_id = share_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeShare, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeShare):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
