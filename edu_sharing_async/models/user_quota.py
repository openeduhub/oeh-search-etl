# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserQuota(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'size_current': 'int',
        'size_quota': 'int'
    }

    attribute_map = {
        'enabled': 'enabled',
        'size_current': 'sizeCurrent',
        'size_quota': 'sizeQuota'
    }

    def __init__(self, enabled=False, size_current=None, size_quota=None):  # noqa: E501
        """UserQuota - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self._size_current = None
        self._size_quota = None
        self.discriminator = None
        if enabled is not None:
            self.enabled = enabled
        if size_current is not None:
            self.size_current = size_current
        if size_quota is not None:
            self.size_quota = size_quota

    @property
    def enabled(self):
        """Gets the enabled of this UserQuota.  # noqa: E501


        :return: The enabled of this UserQuota.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UserQuota.


        :param enabled: The enabled of this UserQuota.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def size_current(self):
        """Gets the size_current of this UserQuota.  # noqa: E501


        :return: The size_current of this UserQuota.  # noqa: E501
        :rtype: int
        """
        return self._size_current

    @size_current.setter
    def size_current(self, size_current):
        """Sets the size_current of this UserQuota.


        :param size_current: The size_current of this UserQuota.  # noqa: E501
        :type: int
        """

        self._size_current = size_current

    @property
    def size_quota(self):
        """Gets the size_quota of this UserQuota.  # noqa: E501


        :return: The size_quota of this UserQuota.  # noqa: E501
        :rtype: int
        """
        return self._size_quota

    @size_quota.setter
    def size_quota(self, size_quota):
        """Sets the size_quota of this UserQuota.


        :param size_quota: The size_quota of this UserQuota.  # noqa: E501
        :type: int
        """

        self._size_quota = size_quota

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserQuota, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserQuota):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
