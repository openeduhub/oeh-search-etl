# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MediacenterProfileExtension(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'location': 'str',
        'district_abbreviation': 'str',
        'main_url': 'str',
        'catalogs': 'list[Catalog]',
        'content_status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'location': 'location',
        'district_abbreviation': 'districtAbbreviation',
        'main_url': 'mainUrl',
        'catalogs': 'catalogs',
        'content_status': 'contentStatus'
    }

    def __init__(self, id=None, location=None, district_abbreviation=None, main_url=None, catalogs=None, content_status=None):  # noqa: E501
        """MediacenterProfileExtension - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._location = None
        self._district_abbreviation = None
        self._main_url = None
        self._catalogs = None
        self._content_status = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if location is not None:
            self.location = location
        if district_abbreviation is not None:
            self.district_abbreviation = district_abbreviation
        if main_url is not None:
            self.main_url = main_url
        if catalogs is not None:
            self.catalogs = catalogs
        if content_status is not None:
            self.content_status = content_status

    @property
    def id(self):
        """Gets the id of this MediacenterProfileExtension.  # noqa: E501


        :return: The id of this MediacenterProfileExtension.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MediacenterProfileExtension.


        :param id: The id of this MediacenterProfileExtension.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this MediacenterProfileExtension.  # noqa: E501


        :return: The location of this MediacenterProfileExtension.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this MediacenterProfileExtension.


        :param location: The location of this MediacenterProfileExtension.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def district_abbreviation(self):
        """Gets the district_abbreviation of this MediacenterProfileExtension.  # noqa: E501


        :return: The district_abbreviation of this MediacenterProfileExtension.  # noqa: E501
        :rtype: str
        """
        return self._district_abbreviation

    @district_abbreviation.setter
    def district_abbreviation(self, district_abbreviation):
        """Sets the district_abbreviation of this MediacenterProfileExtension.


        :param district_abbreviation: The district_abbreviation of this MediacenterProfileExtension.  # noqa: E501
        :type: str
        """

        self._district_abbreviation = district_abbreviation

    @property
    def main_url(self):
        """Gets the main_url of this MediacenterProfileExtension.  # noqa: E501


        :return: The main_url of this MediacenterProfileExtension.  # noqa: E501
        :rtype: str
        """
        return self._main_url

    @main_url.setter
    def main_url(self, main_url):
        """Sets the main_url of this MediacenterProfileExtension.


        :param main_url: The main_url of this MediacenterProfileExtension.  # noqa: E501
        :type: str
        """

        self._main_url = main_url

    @property
    def catalogs(self):
        """Gets the catalogs of this MediacenterProfileExtension.  # noqa: E501


        :return: The catalogs of this MediacenterProfileExtension.  # noqa: E501
        :rtype: list[Catalog]
        """
        return self._catalogs

    @catalogs.setter
    def catalogs(self, catalogs):
        """Sets the catalogs of this MediacenterProfileExtension.


        :param catalogs: The catalogs of this MediacenterProfileExtension.  # noqa: E501
        :type: list[Catalog]
        """

        self._catalogs = catalogs

    @property
    def content_status(self):
        """Gets the content_status of this MediacenterProfileExtension.  # noqa: E501


        :return: The content_status of this MediacenterProfileExtension.  # noqa: E501
        :rtype: str
        """
        return self._content_status

    @content_status.setter
    def content_status(self, content_status):
        """Sets the content_status of this MediacenterProfileExtension.


        :param content_status: The content_status of this MediacenterProfileExtension.  # noqa: E501
        :type: str
        """
        allowed_values = ["Activated", "Deactivated"]  # noqa: E501
        if content_status not in allowed_values:
            raise ValueError(
                "Invalid value for `content_status` ({0}), must be one of {1}"  # noqa: E501
                .format(content_status, allowed_values)
            )

        self._content_status = content_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MediacenterProfileExtension, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MediacenterProfileExtension):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
