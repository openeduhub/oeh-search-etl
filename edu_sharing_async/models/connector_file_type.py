# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConnectorFileType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ccressourceversion': 'str',
        'ccressourcetype': 'str',
        'ccresourcesubtype': 'str',
        'editor_type': 'str',
        'mimetype': 'str',
        'filetype': 'str',
        'creatable': 'bool',
        'editable': 'bool'
    }

    attribute_map = {
        'ccressourceversion': 'ccressourceversion',
        'ccressourcetype': 'ccressourcetype',
        'ccresourcesubtype': 'ccresourcesubtype',
        'editor_type': 'editorType',
        'mimetype': 'mimetype',
        'filetype': 'filetype',
        'creatable': 'creatable',
        'editable': 'editable'
    }

    def __init__(self, ccressourceversion=None, ccressourcetype=None, ccresourcesubtype=None, editor_type=None, mimetype=None, filetype=None, creatable=False, editable=False):  # noqa: E501
        """ConnectorFileType - a model defined in Swagger"""  # noqa: E501
        self._ccressourceversion = None
        self._ccressourcetype = None
        self._ccresourcesubtype = None
        self._editor_type = None
        self._mimetype = None
        self._filetype = None
        self._creatable = None
        self._editable = None
        self.discriminator = None
        if ccressourceversion is not None:
            self.ccressourceversion = ccressourceversion
        if ccressourcetype is not None:
            self.ccressourcetype = ccressourcetype
        if ccresourcesubtype is not None:
            self.ccresourcesubtype = ccresourcesubtype
        if editor_type is not None:
            self.editor_type = editor_type
        if mimetype is not None:
            self.mimetype = mimetype
        if filetype is not None:
            self.filetype = filetype
        if creatable is not None:
            self.creatable = creatable
        if editable is not None:
            self.editable = editable

    @property
    def ccressourceversion(self):
        """Gets the ccressourceversion of this ConnectorFileType.  # noqa: E501


        :return: The ccressourceversion of this ConnectorFileType.  # noqa: E501
        :rtype: str
        """
        return self._ccressourceversion

    @ccressourceversion.setter
    def ccressourceversion(self, ccressourceversion):
        """Sets the ccressourceversion of this ConnectorFileType.


        :param ccressourceversion: The ccressourceversion of this ConnectorFileType.  # noqa: E501
        :type: str
        """

        self._ccressourceversion = ccressourceversion

    @property
    def ccressourcetype(self):
        """Gets the ccressourcetype of this ConnectorFileType.  # noqa: E501


        :return: The ccressourcetype of this ConnectorFileType.  # noqa: E501
        :rtype: str
        """
        return self._ccressourcetype

    @ccressourcetype.setter
    def ccressourcetype(self, ccressourcetype):
        """Sets the ccressourcetype of this ConnectorFileType.


        :param ccressourcetype: The ccressourcetype of this ConnectorFileType.  # noqa: E501
        :type: str
        """

        self._ccressourcetype = ccressourcetype

    @property
    def ccresourcesubtype(self):
        """Gets the ccresourcesubtype of this ConnectorFileType.  # noqa: E501


        :return: The ccresourcesubtype of this ConnectorFileType.  # noqa: E501
        :rtype: str
        """
        return self._ccresourcesubtype

    @ccresourcesubtype.setter
    def ccresourcesubtype(self, ccresourcesubtype):
        """Sets the ccresourcesubtype of this ConnectorFileType.


        :param ccresourcesubtype: The ccresourcesubtype of this ConnectorFileType.  # noqa: E501
        :type: str
        """

        self._ccresourcesubtype = ccresourcesubtype

    @property
    def editor_type(self):
        """Gets the editor_type of this ConnectorFileType.  # noqa: E501


        :return: The editor_type of this ConnectorFileType.  # noqa: E501
        :rtype: str
        """
        return self._editor_type

    @editor_type.setter
    def editor_type(self, editor_type):
        """Sets the editor_type of this ConnectorFileType.


        :param editor_type: The editor_type of this ConnectorFileType.  # noqa: E501
        :type: str
        """

        self._editor_type = editor_type

    @property
    def mimetype(self):
        """Gets the mimetype of this ConnectorFileType.  # noqa: E501


        :return: The mimetype of this ConnectorFileType.  # noqa: E501
        :rtype: str
        """
        return self._mimetype

    @mimetype.setter
    def mimetype(self, mimetype):
        """Sets the mimetype of this ConnectorFileType.


        :param mimetype: The mimetype of this ConnectorFileType.  # noqa: E501
        :type: str
        """

        self._mimetype = mimetype

    @property
    def filetype(self):
        """Gets the filetype of this ConnectorFileType.  # noqa: E501


        :return: The filetype of this ConnectorFileType.  # noqa: E501
        :rtype: str
        """
        return self._filetype

    @filetype.setter
    def filetype(self, filetype):
        """Sets the filetype of this ConnectorFileType.


        :param filetype: The filetype of this ConnectorFileType.  # noqa: E501
        :type: str
        """

        self._filetype = filetype

    @property
    def creatable(self):
        """Gets the creatable of this ConnectorFileType.  # noqa: E501


        :return: The creatable of this ConnectorFileType.  # noqa: E501
        :rtype: bool
        """
        return self._creatable

    @creatable.setter
    def creatable(self, creatable):
        """Sets the creatable of this ConnectorFileType.


        :param creatable: The creatable of this ConnectorFileType.  # noqa: E501
        :type: bool
        """

        self._creatable = creatable

    @property
    def editable(self):
        """Gets the editable of this ConnectorFileType.  # noqa: E501


        :return: The editable of this ConnectorFileType.  # noqa: E501
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this ConnectorFileType.


        :param editable: The editable of this ConnectorFileType.  # noqa: E501
        :type: bool
        """

        self._editable = editable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConnectorFileType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectorFileType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
