# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SharingInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'password_matches': 'bool',
        'password': 'bool',
        'expired': 'bool',
        'invited_by': 'Person',
        'node': 'Node'
    }

    attribute_map = {
        'password_matches': 'passwordMatches',
        'password': 'password',
        'expired': 'expired',
        'invited_by': 'invitedBy',
        'node': 'node'
    }

    def __init__(self, password_matches=False, password=False, expired=False, invited_by=None, node=None):  # noqa: E501
        """SharingInfo - a model defined in Swagger"""  # noqa: E501
        self._password_matches = None
        self._password = None
        self._expired = None
        self._invited_by = None
        self._node = None
        self.discriminator = None
        if password_matches is not None:
            self.password_matches = password_matches
        if password is not None:
            self.password = password
        if expired is not None:
            self.expired = expired
        if invited_by is not None:
            self.invited_by = invited_by
        if node is not None:
            self.node = node

    @property
    def password_matches(self):
        """Gets the password_matches of this SharingInfo.  # noqa: E501


        :return: The password_matches of this SharingInfo.  # noqa: E501
        :rtype: bool
        """
        return self._password_matches

    @password_matches.setter
    def password_matches(self, password_matches):
        """Sets the password_matches of this SharingInfo.


        :param password_matches: The password_matches of this SharingInfo.  # noqa: E501
        :type: bool
        """

        self._password_matches = password_matches

    @property
    def password(self):
        """Gets the password of this SharingInfo.  # noqa: E501


        :return: The password of this SharingInfo.  # noqa: E501
        :rtype: bool
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this SharingInfo.


        :param password: The password of this SharingInfo.  # noqa: E501
        :type: bool
        """

        self._password = password

    @property
    def expired(self):
        """Gets the expired of this SharingInfo.  # noqa: E501


        :return: The expired of this SharingInfo.  # noqa: E501
        :rtype: bool
        """
        return self._expired

    @expired.setter
    def expired(self, expired):
        """Sets the expired of this SharingInfo.


        :param expired: The expired of this SharingInfo.  # noqa: E501
        :type: bool
        """

        self._expired = expired

    @property
    def invited_by(self):
        """Gets the invited_by of this SharingInfo.  # noqa: E501


        :return: The invited_by of this SharingInfo.  # noqa: E501
        :rtype: Person
        """
        return self._invited_by

    @invited_by.setter
    def invited_by(self, invited_by):
        """Sets the invited_by of this SharingInfo.


        :param invited_by: The invited_by of this SharingInfo.  # noqa: E501
        :type: Person
        """

        self._invited_by = invited_by

    @property
    def node(self):
        """Gets the node of this SharingInfo.  # noqa: E501


        :return: The node of this SharingInfo.  # noqa: E501
        :rtype: Node
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this SharingInfo.


        :param node: The node of this SharingInfo.  # noqa: E501
        :type: Node
        """

        self._node = node

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SharingInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SharingInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
