# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RenderingDetailsEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'details_snippet': 'str',
        'mime_type': 'str',
        'node': 'Node'
    }

    attribute_map = {
        'details_snippet': 'detailsSnippet',
        'mime_type': 'mimeType',
        'node': 'node'
    }

    def __init__(self, details_snippet=None, mime_type=None, node=None):  # noqa: E501
        """RenderingDetailsEntry - a model defined in Swagger"""  # noqa: E501
        self._details_snippet = None
        self._mime_type = None
        self._node = None
        self.discriminator = None
        self.details_snippet = details_snippet
        self.mime_type = mime_type
        self.node = node

    @property
    def details_snippet(self):
        """Gets the details_snippet of this RenderingDetailsEntry.  # noqa: E501


        :return: The details_snippet of this RenderingDetailsEntry.  # noqa: E501
        :rtype: str
        """
        return self._details_snippet

    @details_snippet.setter
    def details_snippet(self, details_snippet):
        """Sets the details_snippet of this RenderingDetailsEntry.


        :param details_snippet: The details_snippet of this RenderingDetailsEntry.  # noqa: E501
        :type: str
        """
        if details_snippet is None:
            raise ValueError("Invalid value for `details_snippet`, must not be `None`")  # noqa: E501

        self._details_snippet = details_snippet

    @property
    def mime_type(self):
        """Gets the mime_type of this RenderingDetailsEntry.  # noqa: E501


        :return: The mime_type of this RenderingDetailsEntry.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this RenderingDetailsEntry.


        :param mime_type: The mime_type of this RenderingDetailsEntry.  # noqa: E501
        :type: str
        """
        if mime_type is None:
            raise ValueError("Invalid value for `mime_type`, must not be `None`")  # noqa: E501

        self._mime_type = mime_type

    @property
    def node(self):
        """Gets the node of this RenderingDetailsEntry.  # noqa: E501


        :return: The node of this RenderingDetailsEntry.  # noqa: E501
        :rtype: Node
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this RenderingDetailsEntry.


        :param node: The node of this RenderingDetailsEntry.  # noqa: E501
        :type: Node
        """
        if node is None:
            raise ValueError("Invalid value for `node`, must not be `None`")  # noqa: E501

        self._node = node

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RenderingDetailsEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RenderingDetailsEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
