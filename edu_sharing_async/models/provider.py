# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Provider(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'legal_name': 'str',
        'url': 'str',
        'email': 'str',
        'area_served': 'str',
        'location': 'Location'
    }

    attribute_map = {
        'legal_name': 'legalName',
        'url': 'url',
        'email': 'email',
        'area_served': 'areaServed',
        'location': 'location'
    }

    def __init__(self, legal_name=None, url=None, email=None, area_served=None, location=None):  # noqa: E501
        """Provider - a model defined in Swagger"""  # noqa: E501
        self._legal_name = None
        self._url = None
        self._email = None
        self._area_served = None
        self._location = None
        self.discriminator = None
        if legal_name is not None:
            self.legal_name = legal_name
        if url is not None:
            self.url = url
        if email is not None:
            self.email = email
        if area_served is not None:
            self.area_served = area_served
        if location is not None:
            self.location = location

    @property
    def legal_name(self):
        """Gets the legal_name of this Provider.  # noqa: E501


        :return: The legal_name of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._legal_name

    @legal_name.setter
    def legal_name(self, legal_name):
        """Sets the legal_name of this Provider.


        :param legal_name: The legal_name of this Provider.  # noqa: E501
        :type: str
        """

        self._legal_name = legal_name

    @property
    def url(self):
        """Gets the url of this Provider.  # noqa: E501


        :return: The url of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Provider.


        :param url: The url of this Provider.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def email(self):
        """Gets the email of this Provider.  # noqa: E501


        :return: The email of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Provider.


        :param email: The email of this Provider.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def area_served(self):
        """Gets the area_served of this Provider.  # noqa: E501


        :return: The area_served of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._area_served

    @area_served.setter
    def area_served(self, area_served):
        """Sets the area_served of this Provider.


        :param area_served: The area_served of this Provider.  # noqa: E501
        :type: str
        """
        allowed_values = ["Organization", "City", "State", "Country", "Continent", "World"]  # noqa: E501
        if area_served not in allowed_values:
            raise ValueError(
                "Invalid value for `area_served` ({0}), must be one of {1}"  # noqa: E501
                .format(area_served, allowed_values)
            )

        self._area_served = area_served

    @property
    def location(self):
        """Gets the location of this Provider.  # noqa: E501


        :return: The location of this Provider.  # noqa: E501
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Provider.


        :param location: The location of this Provider.  # noqa: E501
        :type: Location
        """

        self._location = location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Provider, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Provider):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
