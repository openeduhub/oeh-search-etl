# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Values(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'supported_languages': 'list[str]',
        'extension': 'str',
        'login_url': 'str',
        'login_allow_local': 'bool',
        'login_providers_url': 'str',
        'login_provider_target_url': 'str',
        'register': 'Register',
        'recover_password_url': 'str',
        'imprint_url': 'str',
        'privacy_information_url': 'str',
        'help_url': 'str',
        'whats_new_url': 'str',
        'edit_profile_url': 'str',
        'edit_profile': 'bool',
        'workspace_columns': 'list[str]',
        'hide_main_menu': 'list[str]',
        'logout': 'LogoutInfo',
        'menu_entries': 'list[MenuEntry]',
        'custom_options': 'list[ContextMenuEntry]',
        'allowed_licenses': 'list[str]',
        'custom_licenses': 'list[License]',
        'workflow': 'ConfigWorkflow',
        'license_dialog_on_upload': 'bool',
        'node_report': 'bool',
        'branding': 'bool',
        'publishing_notice': 'bool',
        'site_title': 'str',
        'user_display_name': 'str',
        'user_secondary_display_name': 'str',
        'user_affiliation': 'bool',
        'default_username': 'str',
        'default_password': 'str',
        'banner': 'Banner',
        'available_mds': 'list[AvailableMds]',
        'available_repositories': 'list[str]',
        'search_view_type': 'int',
        'items_per_request': 'int',
        'rendering': 'Rendering',
        'session_expired_dialog': 'SessionExpiredDialog',
        'login_default_location': 'str',
        'search_group_results': 'bool',
        'mainnav': 'Mainnav',
        'search_sidenav_mode': 'str',
        'guest': 'Guest',
        'collections': 'Collections',
        'license_agreement': 'LicenseAgreement',
        'services': 'Services',
        'help_menu_options': 'list[HelpMenuOptions]',
        'images': 'list[Image]',
        'icons': 'list[FontIcon]',
        'stream': 'Stream',
        'admin': 'Admin',
        'simple_edit': 'SimpleEdit',
        'frontpage': 'ConfigFrontpage',
        'upload': 'ConfigUpload'
    }

    attribute_map = {
        'supported_languages': 'supportedLanguages',
        'extension': 'extension',
        'login_url': 'loginUrl',
        'login_allow_local': 'loginAllowLocal',
        'login_providers_url': 'loginProvidersUrl',
        'login_provider_target_url': 'loginProviderTargetUrl',
        'register': 'register',
        'recover_password_url': 'recoverPasswordUrl',
        'imprint_url': 'imprintUrl',
        'privacy_information_url': 'privacyInformationUrl',
        'help_url': 'helpUrl',
        'whats_new_url': 'whatsNewUrl',
        'edit_profile_url': 'editProfileUrl',
        'edit_profile': 'editProfile',
        'workspace_columns': 'workspaceColumns',
        'hide_main_menu': 'hideMainMenu',
        'logout': 'logout',
        'menu_entries': 'menuEntries',
        'custom_options': 'customOptions',
        'allowed_licenses': 'allowedLicenses',
        'custom_licenses': 'customLicenses',
        'workflow': 'workflow',
        'license_dialog_on_upload': 'licenseDialogOnUpload',
        'node_report': 'nodeReport',
        'branding': 'branding',
        'publishing_notice': 'publishingNotice',
        'site_title': 'siteTitle',
        'user_display_name': 'userDisplayName',
        'user_secondary_display_name': 'userSecondaryDisplayName',
        'user_affiliation': 'userAffiliation',
        'default_username': 'defaultUsername',
        'default_password': 'defaultPassword',
        'banner': 'banner',
        'available_mds': 'availableMds',
        'available_repositories': 'availableRepositories',
        'search_view_type': 'searchViewType',
        'items_per_request': 'itemsPerRequest',
        'rendering': 'rendering',
        'session_expired_dialog': 'sessionExpiredDialog',
        'login_default_location': 'loginDefaultLocation',
        'search_group_results': 'searchGroupResults',
        'mainnav': 'mainnav',
        'search_sidenav_mode': 'searchSidenavMode',
        'guest': 'guest',
        'collections': 'collections',
        'license_agreement': 'licenseAgreement',
        'services': 'services',
        'help_menu_options': 'helpMenuOptions',
        'images': 'images',
        'icons': 'icons',
        'stream': 'stream',
        'admin': 'admin',
        'simple_edit': 'simpleEdit',
        'frontpage': 'frontpage',
        'upload': 'upload'
    }

    def __init__(self, supported_languages=None, extension=None, login_url=None, login_allow_local=False, login_providers_url=None, login_provider_target_url=None, register=None, recover_password_url=None, imprint_url=None, privacy_information_url=None, help_url=None, whats_new_url=None, edit_profile_url=None, edit_profile=False, workspace_columns=None, hide_main_menu=None, logout=None, menu_entries=None, custom_options=None, allowed_licenses=None, custom_licenses=None, workflow=None, license_dialog_on_upload=False, node_report=False, branding=False, publishing_notice=False, site_title=None, user_display_name=None, user_secondary_display_name=None, user_affiliation=False, default_username=None, default_password=None, banner=None, available_mds=None, available_repositories=None, search_view_type=None, items_per_request=None, rendering=None, session_expired_dialog=None, login_default_location=None, search_group_results=False, mainnav=None, search_sidenav_mode=None, guest=None, collections=None, license_agreement=None, services=None, help_menu_options=None, images=None, icons=None, stream=None, admin=None, simple_edit=None, frontpage=None, upload=None):  # noqa: E501
        """Values - a model defined in Swagger"""  # noqa: E501
        self._supported_languages = None
        self._extension = None
        self._login_url = None
        self._login_allow_local = None
        self._login_providers_url = None
        self._login_provider_target_url = None
        self._register = None
        self._recover_password_url = None
        self._imprint_url = None
        self._privacy_information_url = None
        self._help_url = None
        self._whats_new_url = None
        self._edit_profile_url = None
        self._edit_profile = None
        self._workspace_columns = None
        self._hide_main_menu = None
        self._logout = None
        self._menu_entries = None
        self._custom_options = None
        self._allowed_licenses = None
        self._custom_licenses = None
        self._workflow = None
        self._license_dialog_on_upload = None
        self._node_report = None
        self._branding = None
        self._publishing_notice = None
        self._site_title = None
        self._user_display_name = None
        self._user_secondary_display_name = None
        self._user_affiliation = None
        self._default_username = None
        self._default_password = None
        self._banner = None
        self._available_mds = None
        self._available_repositories = None
        self._search_view_type = None
        self._items_per_request = None
        self._rendering = None
        self._session_expired_dialog = None
        self._login_default_location = None
        self._search_group_results = None
        self._mainnav = None
        self._search_sidenav_mode = None
        self._guest = None
        self._collections = None
        self._license_agreement = None
        self._services = None
        self._help_menu_options = None
        self._images = None
        self._icons = None
        self._stream = None
        self._admin = None
        self._simple_edit = None
        self._frontpage = None
        self._upload = None
        self.discriminator = None
        if supported_languages is not None:
            self.supported_languages = supported_languages
        if extension is not None:
            self.extension = extension
        if login_url is not None:
            self.login_url = login_url
        if login_allow_local is not None:
            self.login_allow_local = login_allow_local
        if login_providers_url is not None:
            self.login_providers_url = login_providers_url
        if login_provider_target_url is not None:
            self.login_provider_target_url = login_provider_target_url
        if register is not None:
            self.register = register
        if recover_password_url is not None:
            self.recover_password_url = recover_password_url
        if imprint_url is not None:
            self.imprint_url = imprint_url
        if privacy_information_url is not None:
            self.privacy_information_url = privacy_information_url
        if help_url is not None:
            self.help_url = help_url
        if whats_new_url is not None:
            self.whats_new_url = whats_new_url
        if edit_profile_url is not None:
            self.edit_profile_url = edit_profile_url
        if edit_profile is not None:
            self.edit_profile = edit_profile
        if workspace_columns is not None:
            self.workspace_columns = workspace_columns
        if hide_main_menu is not None:
            self.hide_main_menu = hide_main_menu
        if logout is not None:
            self.logout = logout
        if menu_entries is not None:
            self.menu_entries = menu_entries
        if custom_options is not None:
            self.custom_options = custom_options
        if allowed_licenses is not None:
            self.allowed_licenses = allowed_licenses
        if custom_licenses is not None:
            self.custom_licenses = custom_licenses
        if workflow is not None:
            self.workflow = workflow
        if license_dialog_on_upload is not None:
            self.license_dialog_on_upload = license_dialog_on_upload
        if node_report is not None:
            self.node_report = node_report
        if branding is not None:
            self.branding = branding
        if publishing_notice is not None:
            self.publishing_notice = publishing_notice
        if site_title is not None:
            self.site_title = site_title
        if user_display_name is not None:
            self.user_display_name = user_display_name
        if user_secondary_display_name is not None:
            self.user_secondary_display_name = user_secondary_display_name
        if user_affiliation is not None:
            self.user_affiliation = user_affiliation
        if default_username is not None:
            self.default_username = default_username
        if default_password is not None:
            self.default_password = default_password
        if banner is not None:
            self.banner = banner
        if available_mds is not None:
            self.available_mds = available_mds
        if available_repositories is not None:
            self.available_repositories = available_repositories
        if search_view_type is not None:
            self.search_view_type = search_view_type
        if items_per_request is not None:
            self.items_per_request = items_per_request
        if rendering is not None:
            self.rendering = rendering
        if session_expired_dialog is not None:
            self.session_expired_dialog = session_expired_dialog
        if login_default_location is not None:
            self.login_default_location = login_default_location
        if search_group_results is not None:
            self.search_group_results = search_group_results
        if mainnav is not None:
            self.mainnav = mainnav
        if search_sidenav_mode is not None:
            self.search_sidenav_mode = search_sidenav_mode
        if guest is not None:
            self.guest = guest
        if collections is not None:
            self.collections = collections
        if license_agreement is not None:
            self.license_agreement = license_agreement
        if services is not None:
            self.services = services
        if help_menu_options is not None:
            self.help_menu_options = help_menu_options
        if images is not None:
            self.images = images
        if icons is not None:
            self.icons = icons
        if stream is not None:
            self.stream = stream
        if admin is not None:
            self.admin = admin
        if simple_edit is not None:
            self.simple_edit = simple_edit
        if frontpage is not None:
            self.frontpage = frontpage
        if upload is not None:
            self.upload = upload

    @property
    def supported_languages(self):
        """Gets the supported_languages of this Values.  # noqa: E501


        :return: The supported_languages of this Values.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_languages

    @supported_languages.setter
    def supported_languages(self, supported_languages):
        """Sets the supported_languages of this Values.


        :param supported_languages: The supported_languages of this Values.  # noqa: E501
        :type: list[str]
        """

        self._supported_languages = supported_languages

    @property
    def extension(self):
        """Gets the extension of this Values.  # noqa: E501


        :return: The extension of this Values.  # noqa: E501
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this Values.


        :param extension: The extension of this Values.  # noqa: E501
        :type: str
        """

        self._extension = extension

    @property
    def login_url(self):
        """Gets the login_url of this Values.  # noqa: E501


        :return: The login_url of this Values.  # noqa: E501
        :rtype: str
        """
        return self._login_url

    @login_url.setter
    def login_url(self, login_url):
        """Sets the login_url of this Values.


        :param login_url: The login_url of this Values.  # noqa: E501
        :type: str
        """

        self._login_url = login_url

    @property
    def login_allow_local(self):
        """Gets the login_allow_local of this Values.  # noqa: E501


        :return: The login_allow_local of this Values.  # noqa: E501
        :rtype: bool
        """
        return self._login_allow_local

    @login_allow_local.setter
    def login_allow_local(self, login_allow_local):
        """Sets the login_allow_local of this Values.


        :param login_allow_local: The login_allow_local of this Values.  # noqa: E501
        :type: bool
        """

        self._login_allow_local = login_allow_local

    @property
    def login_providers_url(self):
        """Gets the login_providers_url of this Values.  # noqa: E501


        :return: The login_providers_url of this Values.  # noqa: E501
        :rtype: str
        """
        return self._login_providers_url

    @login_providers_url.setter
    def login_providers_url(self, login_providers_url):
        """Sets the login_providers_url of this Values.


        :param login_providers_url: The login_providers_url of this Values.  # noqa: E501
        :type: str
        """

        self._login_providers_url = login_providers_url

    @property
    def login_provider_target_url(self):
        """Gets the login_provider_target_url of this Values.  # noqa: E501


        :return: The login_provider_target_url of this Values.  # noqa: E501
        :rtype: str
        """
        return self._login_provider_target_url

    @login_provider_target_url.setter
    def login_provider_target_url(self, login_provider_target_url):
        """Sets the login_provider_target_url of this Values.


        :param login_provider_target_url: The login_provider_target_url of this Values.  # noqa: E501
        :type: str
        """

        self._login_provider_target_url = login_provider_target_url

    @property
    def register(self):
        """Gets the register of this Values.  # noqa: E501


        :return: The register of this Values.  # noqa: E501
        :rtype: Register
        """
        return self._register

    @register.setter
    def register(self, register):
        """Sets the register of this Values.


        :param register: The register of this Values.  # noqa: E501
        :type: Register
        """

        self._register = register

    @property
    def recover_password_url(self):
        """Gets the recover_password_url of this Values.  # noqa: E501


        :return: The recover_password_url of this Values.  # noqa: E501
        :rtype: str
        """
        return self._recover_password_url

    @recover_password_url.setter
    def recover_password_url(self, recover_password_url):
        """Sets the recover_password_url of this Values.


        :param recover_password_url: The recover_password_url of this Values.  # noqa: E501
        :type: str
        """

        self._recover_password_url = recover_password_url

    @property
    def imprint_url(self):
        """Gets the imprint_url of this Values.  # noqa: E501


        :return: The imprint_url of this Values.  # noqa: E501
        :rtype: str
        """
        return self._imprint_url

    @imprint_url.setter
    def imprint_url(self, imprint_url):
        """Sets the imprint_url of this Values.


        :param imprint_url: The imprint_url of this Values.  # noqa: E501
        :type: str
        """

        self._imprint_url = imprint_url

    @property
    def privacy_information_url(self):
        """Gets the privacy_information_url of this Values.  # noqa: E501


        :return: The privacy_information_url of this Values.  # noqa: E501
        :rtype: str
        """
        return self._privacy_information_url

    @privacy_information_url.setter
    def privacy_information_url(self, privacy_information_url):
        """Sets the privacy_information_url of this Values.


        :param privacy_information_url: The privacy_information_url of this Values.  # noqa: E501
        :type: str
        """

        self._privacy_information_url = privacy_information_url

    @property
    def help_url(self):
        """Gets the help_url of this Values.  # noqa: E501


        :return: The help_url of this Values.  # noqa: E501
        :rtype: str
        """
        return self._help_url

    @help_url.setter
    def help_url(self, help_url):
        """Sets the help_url of this Values.


        :param help_url: The help_url of this Values.  # noqa: E501
        :type: str
        """

        self._help_url = help_url

    @property
    def whats_new_url(self):
        """Gets the whats_new_url of this Values.  # noqa: E501


        :return: The whats_new_url of this Values.  # noqa: E501
        :rtype: str
        """
        return self._whats_new_url

    @whats_new_url.setter
    def whats_new_url(self, whats_new_url):
        """Sets the whats_new_url of this Values.


        :param whats_new_url: The whats_new_url of this Values.  # noqa: E501
        :type: str
        """

        self._whats_new_url = whats_new_url

    @property
    def edit_profile_url(self):
        """Gets the edit_profile_url of this Values.  # noqa: E501


        :return: The edit_profile_url of this Values.  # noqa: E501
        :rtype: str
        """
        return self._edit_profile_url

    @edit_profile_url.setter
    def edit_profile_url(self, edit_profile_url):
        """Sets the edit_profile_url of this Values.


        :param edit_profile_url: The edit_profile_url of this Values.  # noqa: E501
        :type: str
        """

        self._edit_profile_url = edit_profile_url

    @property
    def edit_profile(self):
        """Gets the edit_profile of this Values.  # noqa: E501


        :return: The edit_profile of this Values.  # noqa: E501
        :rtype: bool
        """
        return self._edit_profile

    @edit_profile.setter
    def edit_profile(self, edit_profile):
        """Sets the edit_profile of this Values.


        :param edit_profile: The edit_profile of this Values.  # noqa: E501
        :type: bool
        """

        self._edit_profile = edit_profile

    @property
    def workspace_columns(self):
        """Gets the workspace_columns of this Values.  # noqa: E501


        :return: The workspace_columns of this Values.  # noqa: E501
        :rtype: list[str]
        """
        return self._workspace_columns

    @workspace_columns.setter
    def workspace_columns(self, workspace_columns):
        """Sets the workspace_columns of this Values.


        :param workspace_columns: The workspace_columns of this Values.  # noqa: E501
        :type: list[str]
        """

        self._workspace_columns = workspace_columns

    @property
    def hide_main_menu(self):
        """Gets the hide_main_menu of this Values.  # noqa: E501


        :return: The hide_main_menu of this Values.  # noqa: E501
        :rtype: list[str]
        """
        return self._hide_main_menu

    @hide_main_menu.setter
    def hide_main_menu(self, hide_main_menu):
        """Sets the hide_main_menu of this Values.


        :param hide_main_menu: The hide_main_menu of this Values.  # noqa: E501
        :type: list[str]
        """

        self._hide_main_menu = hide_main_menu

    @property
    def logout(self):
        """Gets the logout of this Values.  # noqa: E501


        :return: The logout of this Values.  # noqa: E501
        :rtype: LogoutInfo
        """
        return self._logout

    @logout.setter
    def logout(self, logout):
        """Sets the logout of this Values.


        :param logout: The logout of this Values.  # noqa: E501
        :type: LogoutInfo
        """

        self._logout = logout

    @property
    def menu_entries(self):
        """Gets the menu_entries of this Values.  # noqa: E501


        :return: The menu_entries of this Values.  # noqa: E501
        :rtype: list[MenuEntry]
        """
        return self._menu_entries

    @menu_entries.setter
    def menu_entries(self, menu_entries):
        """Sets the menu_entries of this Values.


        :param menu_entries: The menu_entries of this Values.  # noqa: E501
        :type: list[MenuEntry]
        """

        self._menu_entries = menu_entries

    @property
    def custom_options(self):
        """Gets the custom_options of this Values.  # noqa: E501


        :return: The custom_options of this Values.  # noqa: E501
        :rtype: list[ContextMenuEntry]
        """
        return self._custom_options

    @custom_options.setter
    def custom_options(self, custom_options):
        """Sets the custom_options of this Values.


        :param custom_options: The custom_options of this Values.  # noqa: E501
        :type: list[ContextMenuEntry]
        """

        self._custom_options = custom_options

    @property
    def allowed_licenses(self):
        """Gets the allowed_licenses of this Values.  # noqa: E501


        :return: The allowed_licenses of this Values.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_licenses

    @allowed_licenses.setter
    def allowed_licenses(self, allowed_licenses):
        """Sets the allowed_licenses of this Values.


        :param allowed_licenses: The allowed_licenses of this Values.  # noqa: E501
        :type: list[str]
        """

        self._allowed_licenses = allowed_licenses

    @property
    def custom_licenses(self):
        """Gets the custom_licenses of this Values.  # noqa: E501


        :return: The custom_licenses of this Values.  # noqa: E501
        :rtype: list[License]
        """
        return self._custom_licenses

    @custom_licenses.setter
    def custom_licenses(self, custom_licenses):
        """Sets the custom_licenses of this Values.


        :param custom_licenses: The custom_licenses of this Values.  # noqa: E501
        :type: list[License]
        """

        self._custom_licenses = custom_licenses

    @property
    def workflow(self):
        """Gets the workflow of this Values.  # noqa: E501


        :return: The workflow of this Values.  # noqa: E501
        :rtype: ConfigWorkflow
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this Values.


        :param workflow: The workflow of this Values.  # noqa: E501
        :type: ConfigWorkflow
        """

        self._workflow = workflow

    @property
    def license_dialog_on_upload(self):
        """Gets the license_dialog_on_upload of this Values.  # noqa: E501


        :return: The license_dialog_on_upload of this Values.  # noqa: E501
        :rtype: bool
        """
        return self._license_dialog_on_upload

    @license_dialog_on_upload.setter
    def license_dialog_on_upload(self, license_dialog_on_upload):
        """Sets the license_dialog_on_upload of this Values.


        :param license_dialog_on_upload: The license_dialog_on_upload of this Values.  # noqa: E501
        :type: bool
        """

        self._license_dialog_on_upload = license_dialog_on_upload

    @property
    def node_report(self):
        """Gets the node_report of this Values.  # noqa: E501


        :return: The node_report of this Values.  # noqa: E501
        :rtype: bool
        """
        return self._node_report

    @node_report.setter
    def node_report(self, node_report):
        """Sets the node_report of this Values.


        :param node_report: The node_report of this Values.  # noqa: E501
        :type: bool
        """

        self._node_report = node_report

    @property
    def branding(self):
        """Gets the branding of this Values.  # noqa: E501


        :return: The branding of this Values.  # noqa: E501
        :rtype: bool
        """
        return self._branding

    @branding.setter
    def branding(self, branding):
        """Sets the branding of this Values.


        :param branding: The branding of this Values.  # noqa: E501
        :type: bool
        """

        self._branding = branding

    @property
    def publishing_notice(self):
        """Gets the publishing_notice of this Values.  # noqa: E501


        :return: The publishing_notice of this Values.  # noqa: E501
        :rtype: bool
        """
        return self._publishing_notice

    @publishing_notice.setter
    def publishing_notice(self, publishing_notice):
        """Sets the publishing_notice of this Values.


        :param publishing_notice: The publishing_notice of this Values.  # noqa: E501
        :type: bool
        """

        self._publishing_notice = publishing_notice

    @property
    def site_title(self):
        """Gets the site_title of this Values.  # noqa: E501


        :return: The site_title of this Values.  # noqa: E501
        :rtype: str
        """
        return self._site_title

    @site_title.setter
    def site_title(self, site_title):
        """Sets the site_title of this Values.


        :param site_title: The site_title of this Values.  # noqa: E501
        :type: str
        """

        self._site_title = site_title

    @property
    def user_display_name(self):
        """Gets the user_display_name of this Values.  # noqa: E501


        :return: The user_display_name of this Values.  # noqa: E501
        :rtype: str
        """
        return self._user_display_name

    @user_display_name.setter
    def user_display_name(self, user_display_name):
        """Sets the user_display_name of this Values.


        :param user_display_name: The user_display_name of this Values.  # noqa: E501
        :type: str
        """

        self._user_display_name = user_display_name

    @property
    def user_secondary_display_name(self):
        """Gets the user_secondary_display_name of this Values.  # noqa: E501


        :return: The user_secondary_display_name of this Values.  # noqa: E501
        :rtype: str
        """
        return self._user_secondary_display_name

    @user_secondary_display_name.setter
    def user_secondary_display_name(self, user_secondary_display_name):
        """Sets the user_secondary_display_name of this Values.


        :param user_secondary_display_name: The user_secondary_display_name of this Values.  # noqa: E501
        :type: str
        """

        self._user_secondary_display_name = user_secondary_display_name

    @property
    def user_affiliation(self):
        """Gets the user_affiliation of this Values.  # noqa: E501


        :return: The user_affiliation of this Values.  # noqa: E501
        :rtype: bool
        """
        return self._user_affiliation

    @user_affiliation.setter
    def user_affiliation(self, user_affiliation):
        """Sets the user_affiliation of this Values.


        :param user_affiliation: The user_affiliation of this Values.  # noqa: E501
        :type: bool
        """

        self._user_affiliation = user_affiliation

    @property
    def default_username(self):
        """Gets the default_username of this Values.  # noqa: E501


        :return: The default_username of this Values.  # noqa: E501
        :rtype: str
        """
        return self._default_username

    @default_username.setter
    def default_username(self, default_username):
        """Sets the default_username of this Values.


        :param default_username: The default_username of this Values.  # noqa: E501
        :type: str
        """

        self._default_username = default_username

    @property
    def default_password(self):
        """Gets the default_password of this Values.  # noqa: E501


        :return: The default_password of this Values.  # noqa: E501
        :rtype: str
        """
        return self._default_password

    @default_password.setter
    def default_password(self, default_password):
        """Sets the default_password of this Values.


        :param default_password: The default_password of this Values.  # noqa: E501
        :type: str
        """

        self._default_password = default_password

    @property
    def banner(self):
        """Gets the banner of this Values.  # noqa: E501


        :return: The banner of this Values.  # noqa: E501
        :rtype: Banner
        """
        return self._banner

    @banner.setter
    def banner(self, banner):
        """Sets the banner of this Values.


        :param banner: The banner of this Values.  # noqa: E501
        :type: Banner
        """

        self._banner = banner

    @property
    def available_mds(self):
        """Gets the available_mds of this Values.  # noqa: E501


        :return: The available_mds of this Values.  # noqa: E501
        :rtype: list[AvailableMds]
        """
        return self._available_mds

    @available_mds.setter
    def available_mds(self, available_mds):
        """Sets the available_mds of this Values.


        :param available_mds: The available_mds of this Values.  # noqa: E501
        :type: list[AvailableMds]
        """

        self._available_mds = available_mds

    @property
    def available_repositories(self):
        """Gets the available_repositories of this Values.  # noqa: E501


        :return: The available_repositories of this Values.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_repositories

    @available_repositories.setter
    def available_repositories(self, available_repositories):
        """Sets the available_repositories of this Values.


        :param available_repositories: The available_repositories of this Values.  # noqa: E501
        :type: list[str]
        """

        self._available_repositories = available_repositories

    @property
    def search_view_type(self):
        """Gets the search_view_type of this Values.  # noqa: E501


        :return: The search_view_type of this Values.  # noqa: E501
        :rtype: int
        """
        return self._search_view_type

    @search_view_type.setter
    def search_view_type(self, search_view_type):
        """Sets the search_view_type of this Values.


        :param search_view_type: The search_view_type of this Values.  # noqa: E501
        :type: int
        """

        self._search_view_type = search_view_type

    @property
    def items_per_request(self):
        """Gets the items_per_request of this Values.  # noqa: E501


        :return: The items_per_request of this Values.  # noqa: E501
        :rtype: int
        """
        return self._items_per_request

    @items_per_request.setter
    def items_per_request(self, items_per_request):
        """Sets the items_per_request of this Values.


        :param items_per_request: The items_per_request of this Values.  # noqa: E501
        :type: int
        """

        self._items_per_request = items_per_request

    @property
    def rendering(self):
        """Gets the rendering of this Values.  # noqa: E501


        :return: The rendering of this Values.  # noqa: E501
        :rtype: Rendering
        """
        return self._rendering

    @rendering.setter
    def rendering(self, rendering):
        """Sets the rendering of this Values.


        :param rendering: The rendering of this Values.  # noqa: E501
        :type: Rendering
        """

        self._rendering = rendering

    @property
    def session_expired_dialog(self):
        """Gets the session_expired_dialog of this Values.  # noqa: E501


        :return: The session_expired_dialog of this Values.  # noqa: E501
        :rtype: SessionExpiredDialog
        """
        return self._session_expired_dialog

    @session_expired_dialog.setter
    def session_expired_dialog(self, session_expired_dialog):
        """Sets the session_expired_dialog of this Values.


        :param session_expired_dialog: The session_expired_dialog of this Values.  # noqa: E501
        :type: SessionExpiredDialog
        """

        self._session_expired_dialog = session_expired_dialog

    @property
    def login_default_location(self):
        """Gets the login_default_location of this Values.  # noqa: E501


        :return: The login_default_location of this Values.  # noqa: E501
        :rtype: str
        """
        return self._login_default_location

    @login_default_location.setter
    def login_default_location(self, login_default_location):
        """Sets the login_default_location of this Values.


        :param login_default_location: The login_default_location of this Values.  # noqa: E501
        :type: str
        """

        self._login_default_location = login_default_location

    @property
    def search_group_results(self):
        """Gets the search_group_results of this Values.  # noqa: E501


        :return: The search_group_results of this Values.  # noqa: E501
        :rtype: bool
        """
        return self._search_group_results

    @search_group_results.setter
    def search_group_results(self, search_group_results):
        """Sets the search_group_results of this Values.


        :param search_group_results: The search_group_results of this Values.  # noqa: E501
        :type: bool
        """

        self._search_group_results = search_group_results

    @property
    def mainnav(self):
        """Gets the mainnav of this Values.  # noqa: E501


        :return: The mainnav of this Values.  # noqa: E501
        :rtype: Mainnav
        """
        return self._mainnav

    @mainnav.setter
    def mainnav(self, mainnav):
        """Sets the mainnav of this Values.


        :param mainnav: The mainnav of this Values.  # noqa: E501
        :type: Mainnav
        """

        self._mainnav = mainnav

    @property
    def search_sidenav_mode(self):
        """Gets the search_sidenav_mode of this Values.  # noqa: E501


        :return: The search_sidenav_mode of this Values.  # noqa: E501
        :rtype: str
        """
        return self._search_sidenav_mode

    @search_sidenav_mode.setter
    def search_sidenav_mode(self, search_sidenav_mode):
        """Sets the search_sidenav_mode of this Values.


        :param search_sidenav_mode: The search_sidenav_mode of this Values.  # noqa: E501
        :type: str
        """

        self._search_sidenav_mode = search_sidenav_mode

    @property
    def guest(self):
        """Gets the guest of this Values.  # noqa: E501


        :return: The guest of this Values.  # noqa: E501
        :rtype: Guest
        """
        return self._guest

    @guest.setter
    def guest(self, guest):
        """Sets the guest of this Values.


        :param guest: The guest of this Values.  # noqa: E501
        :type: Guest
        """

        self._guest = guest

    @property
    def collections(self):
        """Gets the collections of this Values.  # noqa: E501


        :return: The collections of this Values.  # noqa: E501
        :rtype: Collections
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this Values.


        :param collections: The collections of this Values.  # noqa: E501
        :type: Collections
        """

        self._collections = collections

    @property
    def license_agreement(self):
        """Gets the license_agreement of this Values.  # noqa: E501


        :return: The license_agreement of this Values.  # noqa: E501
        :rtype: LicenseAgreement
        """
        return self._license_agreement

    @license_agreement.setter
    def license_agreement(self, license_agreement):
        """Sets the license_agreement of this Values.


        :param license_agreement: The license_agreement of this Values.  # noqa: E501
        :type: LicenseAgreement
        """

        self._license_agreement = license_agreement

    @property
    def services(self):
        """Gets the services of this Values.  # noqa: E501


        :return: The services of this Values.  # noqa: E501
        :rtype: Services
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this Values.


        :param services: The services of this Values.  # noqa: E501
        :type: Services
        """

        self._services = services

    @property
    def help_menu_options(self):
        """Gets the help_menu_options of this Values.  # noqa: E501


        :return: The help_menu_options of this Values.  # noqa: E501
        :rtype: list[HelpMenuOptions]
        """
        return self._help_menu_options

    @help_menu_options.setter
    def help_menu_options(self, help_menu_options):
        """Sets the help_menu_options of this Values.


        :param help_menu_options: The help_menu_options of this Values.  # noqa: E501
        :type: list[HelpMenuOptions]
        """

        self._help_menu_options = help_menu_options

    @property
    def images(self):
        """Gets the images of this Values.  # noqa: E501


        :return: The images of this Values.  # noqa: E501
        :rtype: list[Image]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Values.


        :param images: The images of this Values.  # noqa: E501
        :type: list[Image]
        """

        self._images = images

    @property
    def icons(self):
        """Gets the icons of this Values.  # noqa: E501


        :return: The icons of this Values.  # noqa: E501
        :rtype: list[FontIcon]
        """
        return self._icons

    @icons.setter
    def icons(self, icons):
        """Sets the icons of this Values.


        :param icons: The icons of this Values.  # noqa: E501
        :type: list[FontIcon]
        """

        self._icons = icons

    @property
    def stream(self):
        """Gets the stream of this Values.  # noqa: E501


        :return: The stream of this Values.  # noqa: E501
        :rtype: Stream
        """
        return self._stream

    @stream.setter
    def stream(self, stream):
        """Sets the stream of this Values.


        :param stream: The stream of this Values.  # noqa: E501
        :type: Stream
        """

        self._stream = stream

    @property
    def admin(self):
        """Gets the admin of this Values.  # noqa: E501


        :return: The admin of this Values.  # noqa: E501
        :rtype: Admin
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this Values.


        :param admin: The admin of this Values.  # noqa: E501
        :type: Admin
        """

        self._admin = admin

    @property
    def simple_edit(self):
        """Gets the simple_edit of this Values.  # noqa: E501


        :return: The simple_edit of this Values.  # noqa: E501
        :rtype: SimpleEdit
        """
        return self._simple_edit

    @simple_edit.setter
    def simple_edit(self, simple_edit):
        """Sets the simple_edit of this Values.


        :param simple_edit: The simple_edit of this Values.  # noqa: E501
        :type: SimpleEdit
        """

        self._simple_edit = simple_edit

    @property
    def frontpage(self):
        """Gets the frontpage of this Values.  # noqa: E501


        :return: The frontpage of this Values.  # noqa: E501
        :rtype: ConfigFrontpage
        """
        return self._frontpage

    @frontpage.setter
    def frontpage(self, frontpage):
        """Sets the frontpage of this Values.


        :param frontpage: The frontpage of this Values.  # noqa: E501
        :type: ConfigFrontpage
        """

        self._frontpage = frontpage

    @property
    def upload(self):
        """Gets the upload of this Values.  # noqa: E501


        :return: The upload of this Values.  # noqa: E501
        :rtype: ConfigUpload
        """
        return self._upload

    @upload.setter
    def upload(self, upload):
        """Sets the upload of this Values.


        :param upload: The upload of this Values.  # noqa: E501
        :type: ConfigUpload
        """

        self._upload = upload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Values, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Values):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
