# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Frontpage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_count': 'int',
        'display_count': 'int',
        'mode': 'str',
        'timespan': 'str',
        'queries': 'list[Query]',
        'collection': 'str'
    }

    attribute_map = {
        'total_count': 'totalCount',
        'display_count': 'displayCount',
        'mode': 'mode',
        'timespan': 'timespan',
        'queries': 'queries',
        'collection': 'collection'
    }

    def __init__(self, total_count=None, display_count=None, mode=None, timespan=None, queries=None, collection=None):  # noqa: E501
        """Frontpage - a model defined in Swagger"""  # noqa: E501
        self._total_count = None
        self._display_count = None
        self._mode = None
        self._timespan = None
        self._queries = None
        self._collection = None
        self.discriminator = None
        if total_count is not None:
            self.total_count = total_count
        if display_count is not None:
            self.display_count = display_count
        if mode is not None:
            self.mode = mode
        if timespan is not None:
            self.timespan = timespan
        if queries is not None:
            self.queries = queries
        if collection is not None:
            self.collection = collection

    @property
    def total_count(self):
        """Gets the total_count of this Frontpage.  # noqa: E501


        :return: The total_count of this Frontpage.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this Frontpage.


        :param total_count: The total_count of this Frontpage.  # noqa: E501
        :type: int
        """

        self._total_count = total_count

    @property
    def display_count(self):
        """Gets the display_count of this Frontpage.  # noqa: E501


        :return: The display_count of this Frontpage.  # noqa: E501
        :rtype: int
        """
        return self._display_count

    @display_count.setter
    def display_count(self, display_count):
        """Sets the display_count of this Frontpage.


        :param display_count: The display_count of this Frontpage.  # noqa: E501
        :type: int
        """

        self._display_count = display_count

    @property
    def mode(self):
        """Gets the mode of this Frontpage.  # noqa: E501


        :return: The mode of this Frontpage.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Frontpage.


        :param mode: The mode of this Frontpage.  # noqa: E501
        :type: str
        """
        allowed_values = ["collection", "rating", "views", "downloads"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def timespan(self):
        """Gets the timespan of this Frontpage.  # noqa: E501


        :return: The timespan of this Frontpage.  # noqa: E501
        :rtype: str
        """
        return self._timespan

    @timespan.setter
    def timespan(self, timespan):
        """Sets the timespan of this Frontpage.


        :param timespan: The timespan of this Frontpage.  # noqa: E501
        :type: str
        """
        allowed_values = ["days_30", "days_100", "all"]  # noqa: E501
        if timespan not in allowed_values:
            raise ValueError(
                "Invalid value for `timespan` ({0}), must be one of {1}"  # noqa: E501
                .format(timespan, allowed_values)
            )

        self._timespan = timespan

    @property
    def queries(self):
        """Gets the queries of this Frontpage.  # noqa: E501


        :return: The queries of this Frontpage.  # noqa: E501
        :rtype: list[Query]
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this Frontpage.


        :param queries: The queries of this Frontpage.  # noqa: E501
        :type: list[Query]
        """

        self._queries = queries

    @property
    def collection(self):
        """Gets the collection of this Frontpage.  # noqa: E501


        :return: The collection of this Frontpage.  # noqa: E501
        :rtype: str
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this Frontpage.


        :param collection: The collection of this Frontpage.  # noqa: E501
        :type: str
        """

        self._collection = collection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Frontpage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Frontpage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
