# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CollectionReference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'remote': 'Remote',
        'content': 'Content',
        'license': 'License',
        'is_directory': 'bool',
        'comment_count': 'int',
        'rating': 'AccumulatedRatings',
        'access_original': 'list[str]',
        'original_restricted_access': 'bool',
        'ref': 'NodeRef',
        'parent': 'NodeRef',
        'type': 'str',
        'aspects': 'list[str]',
        'name': 'str',
        'title': 'str',
        'metadataset': 'str',
        'repository_type': 'str',
        'created_at': 'datetime',
        'created_by': 'Person',
        'modified_at': 'datetime',
        'modified_by': 'Person',
        'access': 'list[str]',
        'download_url': 'str',
        'properties': 'dict(str, list[str])',
        'mimetype': 'str',
        'mediatype': 'str',
        'size': 'str',
        'preview': 'Preview',
        'icon_url': 'str',
        'collection': 'Collection',
        'owner': 'Person',
        'original_id': 'str'
    }

    attribute_map = {
        'remote': 'remote',
        'content': 'content',
        'license': 'license',
        'is_directory': 'isDirectory',
        'comment_count': 'commentCount',
        'rating': 'rating',
        'access_original': 'accessOriginal',
        'original_restricted_access': 'originalRestrictedAccess',
        'ref': 'ref',
        'parent': 'parent',
        'type': 'type',
        'aspects': 'aspects',
        'name': 'name',
        'title': 'title',
        'metadataset': 'metadataset',
        'repository_type': 'repositoryType',
        'created_at': 'createdAt',
        'created_by': 'createdBy',
        'modified_at': 'modifiedAt',
        'modified_by': 'modifiedBy',
        'access': 'access',
        'download_url': 'downloadUrl',
        'properties': 'properties',
        'mimetype': 'mimetype',
        'mediatype': 'mediatype',
        'size': 'size',
        'preview': 'preview',
        'icon_url': 'iconURL',
        'collection': 'collection',
        'owner': 'owner',
        'original_id': 'originalId'
    }

    def __init__(self, remote=None, content=None, license=None, is_directory=False, comment_count=None, rating=None, access_original=None, original_restricted_access=False, ref=None, parent=None, type=None, aspects=None, name=None, title=None, metadataset=None, repository_type=None, created_at=None, created_by=None, modified_at=None, modified_by=None, access=None, download_url=None, properties=None, mimetype=None, mediatype=None, size=None, preview=None, icon_url=None, collection=None, owner=None, original_id=None):  # noqa: E501
        """CollectionReference - a model defined in Swagger"""  # noqa: E501
        self._remote = None
        self._content = None
        self._license = None
        self._is_directory = None
        self._comment_count = None
        self._rating = None
        self._access_original = None
        self._original_restricted_access = None
        self._ref = None
        self._parent = None
        self._type = None
        self._aspects = None
        self._name = None
        self._title = None
        self._metadataset = None
        self._repository_type = None
        self._created_at = None
        self._created_by = None
        self._modified_at = None
        self._modified_by = None
        self._access = None
        self._download_url = None
        self._properties = None
        self._mimetype = None
        self._mediatype = None
        self._size = None
        self._preview = None
        self._icon_url = None
        self._collection = None
        self._owner = None
        self._original_id = None
        self.discriminator = None
        if remote is not None:
            self.remote = remote
        if content is not None:
            self.content = content
        if license is not None:
            self.license = license
        if is_directory is not None:
            self.is_directory = is_directory
        if comment_count is not None:
            self.comment_count = comment_count
        if rating is not None:
            self.rating = rating
        if access_original is not None:
            self.access_original = access_original
        if original_restricted_access is not None:
            self.original_restricted_access = original_restricted_access
        self.ref = ref
        if parent is not None:
            self.parent = parent
        if type is not None:
            self.type = type
        if aspects is not None:
            self.aspects = aspects
        self.name = name
        if title is not None:
            self.title = title
        if metadataset is not None:
            self.metadataset = metadataset
        if repository_type is not None:
            self.repository_type = repository_type
        self.created_at = created_at
        self.created_by = created_by
        if modified_at is not None:
            self.modified_at = modified_at
        if modified_by is not None:
            self.modified_by = modified_by
        self.access = access
        self.download_url = download_url
        if properties is not None:
            self.properties = properties
        if mimetype is not None:
            self.mimetype = mimetype
        if mediatype is not None:
            self.mediatype = mediatype
        if size is not None:
            self.size = size
        if preview is not None:
            self.preview = preview
        if icon_url is not None:
            self.icon_url = icon_url
        self.collection = collection
        self.owner = owner
        if original_id is not None:
            self.original_id = original_id

    @property
    def remote(self):
        """Gets the remote of this CollectionReference.  # noqa: E501


        :return: The remote of this CollectionReference.  # noqa: E501
        :rtype: Remote
        """
        return self._remote

    @remote.setter
    def remote(self, remote):
        """Sets the remote of this CollectionReference.


        :param remote: The remote of this CollectionReference.  # noqa: E501
        :type: Remote
        """

        self._remote = remote

    @property
    def content(self):
        """Gets the content of this CollectionReference.  # noqa: E501


        :return: The content of this CollectionReference.  # noqa: E501
        :rtype: Content
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this CollectionReference.


        :param content: The content of this CollectionReference.  # noqa: E501
        :type: Content
        """

        self._content = content

    @property
    def license(self):
        """Gets the license of this CollectionReference.  # noqa: E501


        :return: The license of this CollectionReference.  # noqa: E501
        :rtype: License
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this CollectionReference.


        :param license: The license of this CollectionReference.  # noqa: E501
        :type: License
        """

        self._license = license

    @property
    def is_directory(self):
        """Gets the is_directory of this CollectionReference.  # noqa: E501


        :return: The is_directory of this CollectionReference.  # noqa: E501
        :rtype: bool
        """
        return self._is_directory

    @is_directory.setter
    def is_directory(self, is_directory):
        """Sets the is_directory of this CollectionReference.


        :param is_directory: The is_directory of this CollectionReference.  # noqa: E501
        :type: bool
        """

        self._is_directory = is_directory

    @property
    def comment_count(self):
        """Gets the comment_count of this CollectionReference.  # noqa: E501


        :return: The comment_count of this CollectionReference.  # noqa: E501
        :rtype: int
        """
        return self._comment_count

    @comment_count.setter
    def comment_count(self, comment_count):
        """Sets the comment_count of this CollectionReference.


        :param comment_count: The comment_count of this CollectionReference.  # noqa: E501
        :type: int
        """

        self._comment_count = comment_count

    @property
    def rating(self):
        """Gets the rating of this CollectionReference.  # noqa: E501


        :return: The rating of this CollectionReference.  # noqa: E501
        :rtype: AccumulatedRatings
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this CollectionReference.


        :param rating: The rating of this CollectionReference.  # noqa: E501
        :type: AccumulatedRatings
        """

        self._rating = rating

    @property
    def access_original(self):
        """Gets the access_original of this CollectionReference.  # noqa: E501


        :return: The access_original of this CollectionReference.  # noqa: E501
        :rtype: list[str]
        """
        return self._access_original

    @access_original.setter
    def access_original(self, access_original):
        """Sets the access_original of this CollectionReference.


        :param access_original: The access_original of this CollectionReference.  # noqa: E501
        :type: list[str]
        """

        self._access_original = access_original

    @property
    def original_restricted_access(self):
        """Gets the original_restricted_access of this CollectionReference.  # noqa: E501


        :return: The original_restricted_access of this CollectionReference.  # noqa: E501
        :rtype: bool
        """
        return self._original_restricted_access

    @original_restricted_access.setter
    def original_restricted_access(self, original_restricted_access):
        """Sets the original_restricted_access of this CollectionReference.


        :param original_restricted_access: The original_restricted_access of this CollectionReference.  # noqa: E501
        :type: bool
        """

        self._original_restricted_access = original_restricted_access

    @property
    def ref(self):
        """Gets the ref of this CollectionReference.  # noqa: E501


        :return: The ref of this CollectionReference.  # noqa: E501
        :rtype: NodeRef
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this CollectionReference.


        :param ref: The ref of this CollectionReference.  # noqa: E501
        :type: NodeRef
        """
        if ref is None:
            raise ValueError("Invalid value for `ref`, must not be `None`")  # noqa: E501

        self._ref = ref

    @property
    def parent(self):
        """Gets the parent of this CollectionReference.  # noqa: E501


        :return: The parent of this CollectionReference.  # noqa: E501
        :rtype: NodeRef
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this CollectionReference.


        :param parent: The parent of this CollectionReference.  # noqa: E501
        :type: NodeRef
        """

        self._parent = parent

    @property
    def type(self):
        """Gets the type of this CollectionReference.  # noqa: E501


        :return: The type of this CollectionReference.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CollectionReference.


        :param type: The type of this CollectionReference.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def aspects(self):
        """Gets the aspects of this CollectionReference.  # noqa: E501


        :return: The aspects of this CollectionReference.  # noqa: E501
        :rtype: list[str]
        """
        return self._aspects

    @aspects.setter
    def aspects(self, aspects):
        """Sets the aspects of this CollectionReference.


        :param aspects: The aspects of this CollectionReference.  # noqa: E501
        :type: list[str]
        """

        self._aspects = aspects

    @property
    def name(self):
        """Gets the name of this CollectionReference.  # noqa: E501


        :return: The name of this CollectionReference.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CollectionReference.


        :param name: The name of this CollectionReference.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def title(self):
        """Gets the title of this CollectionReference.  # noqa: E501


        :return: The title of this CollectionReference.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CollectionReference.


        :param title: The title of this CollectionReference.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def metadataset(self):
        """Gets the metadataset of this CollectionReference.  # noqa: E501


        :return: The metadataset of this CollectionReference.  # noqa: E501
        :rtype: str
        """
        return self._metadataset

    @metadataset.setter
    def metadataset(self, metadataset):
        """Sets the metadataset of this CollectionReference.


        :param metadataset: The metadataset of this CollectionReference.  # noqa: E501
        :type: str
        """

        self._metadataset = metadataset

    @property
    def repository_type(self):
        """Gets the repository_type of this CollectionReference.  # noqa: E501


        :return: The repository_type of this CollectionReference.  # noqa: E501
        :rtype: str
        """
        return self._repository_type

    @repository_type.setter
    def repository_type(self, repository_type):
        """Sets the repository_type of this CollectionReference.


        :param repository_type: The repository_type of this CollectionReference.  # noqa: E501
        :type: str
        """

        self._repository_type = repository_type

    @property
    def created_at(self):
        """Gets the created_at of this CollectionReference.  # noqa: E501


        :return: The created_at of this CollectionReference.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CollectionReference.


        :param created_at: The created_at of this CollectionReference.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this CollectionReference.  # noqa: E501


        :return: The created_by of this CollectionReference.  # noqa: E501
        :rtype: Person
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this CollectionReference.


        :param created_by: The created_by of this CollectionReference.  # noqa: E501
        :type: Person
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def modified_at(self):
        """Gets the modified_at of this CollectionReference.  # noqa: E501


        :return: The modified_at of this CollectionReference.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this CollectionReference.


        :param modified_at: The modified_at of this CollectionReference.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def modified_by(self):
        """Gets the modified_by of this CollectionReference.  # noqa: E501


        :return: The modified_by of this CollectionReference.  # noqa: E501
        :rtype: Person
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this CollectionReference.


        :param modified_by: The modified_by of this CollectionReference.  # noqa: E501
        :type: Person
        """

        self._modified_by = modified_by

    @property
    def access(self):
        """Gets the access of this CollectionReference.  # noqa: E501


        :return: The access of this CollectionReference.  # noqa: E501
        :rtype: list[str]
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this CollectionReference.


        :param access: The access of this CollectionReference.  # noqa: E501
        :type: list[str]
        """
        if access is None:
            raise ValueError("Invalid value for `access`, must not be `None`")  # noqa: E501

        self._access = access

    @property
    def download_url(self):
        """Gets the download_url of this CollectionReference.  # noqa: E501


        :return: The download_url of this CollectionReference.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this CollectionReference.


        :param download_url: The download_url of this CollectionReference.  # noqa: E501
        :type: str
        """
        if download_url is None:
            raise ValueError("Invalid value for `download_url`, must not be `None`")  # noqa: E501

        self._download_url = download_url

    @property
    def properties(self):
        """Gets the properties of this CollectionReference.  # noqa: E501


        :return: The properties of this CollectionReference.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this CollectionReference.


        :param properties: The properties of this CollectionReference.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._properties = properties

    @property
    def mimetype(self):
        """Gets the mimetype of this CollectionReference.  # noqa: E501


        :return: The mimetype of this CollectionReference.  # noqa: E501
        :rtype: str
        """
        return self._mimetype

    @mimetype.setter
    def mimetype(self, mimetype):
        """Sets the mimetype of this CollectionReference.


        :param mimetype: The mimetype of this CollectionReference.  # noqa: E501
        :type: str
        """

        self._mimetype = mimetype

    @property
    def mediatype(self):
        """Gets the mediatype of this CollectionReference.  # noqa: E501


        :return: The mediatype of this CollectionReference.  # noqa: E501
        :rtype: str
        """
        return self._mediatype

    @mediatype.setter
    def mediatype(self, mediatype):
        """Sets the mediatype of this CollectionReference.


        :param mediatype: The mediatype of this CollectionReference.  # noqa: E501
        :type: str
        """

        self._mediatype = mediatype

    @property
    def size(self):
        """Gets the size of this CollectionReference.  # noqa: E501


        :return: The size of this CollectionReference.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this CollectionReference.


        :param size: The size of this CollectionReference.  # noqa: E501
        :type: str
        """

        self._size = size

    @property
    def preview(self):
        """Gets the preview of this CollectionReference.  # noqa: E501


        :return: The preview of this CollectionReference.  # noqa: E501
        :rtype: Preview
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this CollectionReference.


        :param preview: The preview of this CollectionReference.  # noqa: E501
        :type: Preview
        """

        self._preview = preview

    @property
    def icon_url(self):
        """Gets the icon_url of this CollectionReference.  # noqa: E501


        :return: The icon_url of this CollectionReference.  # noqa: E501
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this CollectionReference.


        :param icon_url: The icon_url of this CollectionReference.  # noqa: E501
        :type: str
        """

        self._icon_url = icon_url

    @property
    def collection(self):
        """Gets the collection of this CollectionReference.  # noqa: E501


        :return: The collection of this CollectionReference.  # noqa: E501
        :rtype: Collection
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this CollectionReference.


        :param collection: The collection of this CollectionReference.  # noqa: E501
        :type: Collection
        """
        if collection is None:
            raise ValueError("Invalid value for `collection`, must not be `None`")  # noqa: E501

        self._collection = collection

    @property
    def owner(self):
        """Gets the owner of this CollectionReference.  # noqa: E501


        :return: The owner of this CollectionReference.  # noqa: E501
        :rtype: Person
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this CollectionReference.


        :param owner: The owner of this CollectionReference.  # noqa: E501
        :type: Person
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def original_id(self):
        """Gets the original_id of this CollectionReference.  # noqa: E501


        :return: The original_id of this CollectionReference.  # noqa: E501
        :rtype: str
        """
        return self._original_id

    @original_id.setter
    def original_id(self, original_id):
        """Sets the original_id of this CollectionReference.


        :param original_id: The original_id of this CollectionReference.  # noqa: E501
        :type: str
        """

        self._original_id = original_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CollectionReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectionReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
