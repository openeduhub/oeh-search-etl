# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MdsQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'criteriaboxid': 'str',
        'handlerclass': 'str',
        'join': 'str',
        'label': 'str',
        'layout': 'str',
        'properties': 'list[MdsQueryProperty]',
        'statement': 'str',
        'stylename': 'str',
        'widget': 'str'
    }

    attribute_map = {
        'criteriaboxid': 'criteriaboxid',
        'handlerclass': 'handlerclass',
        'join': 'join',
        'label': 'label',
        'layout': 'layout',
        'properties': 'properties',
        'statement': 'statement',
        'stylename': 'stylename',
        'widget': 'widget'
    }

    def __init__(self, criteriaboxid=None, handlerclass=None, join=None, label=None, layout=None, properties=None, statement=None, stylename=None, widget=None):  # noqa: E501
        """MdsQuery - a model defined in Swagger"""  # noqa: E501
        self._criteriaboxid = None
        self._handlerclass = None
        self._join = None
        self._label = None
        self._layout = None
        self._properties = None
        self._statement = None
        self._stylename = None
        self._widget = None
        self.discriminator = None
        self.criteriaboxid = criteriaboxid
        self.handlerclass = handlerclass
        self.join = join
        self.label = label
        self.layout = layout
        self.properties = properties
        self.statement = statement
        self.stylename = stylename
        self.widget = widget

    @property
    def criteriaboxid(self):
        """Gets the criteriaboxid of this MdsQuery.  # noqa: E501


        :return: The criteriaboxid of this MdsQuery.  # noqa: E501
        :rtype: str
        """
        return self._criteriaboxid

    @criteriaboxid.setter
    def criteriaboxid(self, criteriaboxid):
        """Sets the criteriaboxid of this MdsQuery.


        :param criteriaboxid: The criteriaboxid of this MdsQuery.  # noqa: E501
        :type: str
        """
        if criteriaboxid is None:
            raise ValueError("Invalid value for `criteriaboxid`, must not be `None`")  # noqa: E501

        self._criteriaboxid = criteriaboxid

    @property
    def handlerclass(self):
        """Gets the handlerclass of this MdsQuery.  # noqa: E501


        :return: The handlerclass of this MdsQuery.  # noqa: E501
        :rtype: str
        """
        return self._handlerclass

    @handlerclass.setter
    def handlerclass(self, handlerclass):
        """Sets the handlerclass of this MdsQuery.


        :param handlerclass: The handlerclass of this MdsQuery.  # noqa: E501
        :type: str
        """
        if handlerclass is None:
            raise ValueError("Invalid value for `handlerclass`, must not be `None`")  # noqa: E501

        self._handlerclass = handlerclass

    @property
    def join(self):
        """Gets the join of this MdsQuery.  # noqa: E501


        :return: The join of this MdsQuery.  # noqa: E501
        :rtype: str
        """
        return self._join

    @join.setter
    def join(self, join):
        """Sets the join of this MdsQuery.


        :param join: The join of this MdsQuery.  # noqa: E501
        :type: str
        """
        if join is None:
            raise ValueError("Invalid value for `join`, must not be `None`")  # noqa: E501

        self._join = join

    @property
    def label(self):
        """Gets the label of this MdsQuery.  # noqa: E501


        :return: The label of this MdsQuery.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this MdsQuery.


        :param label: The label of this MdsQuery.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def layout(self):
        """Gets the layout of this MdsQuery.  # noqa: E501


        :return: The layout of this MdsQuery.  # noqa: E501
        :rtype: str
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this MdsQuery.


        :param layout: The layout of this MdsQuery.  # noqa: E501
        :type: str
        """
        if layout is None:
            raise ValueError("Invalid value for `layout`, must not be `None`")  # noqa: E501

        self._layout = layout

    @property
    def properties(self):
        """Gets the properties of this MdsQuery.  # noqa: E501


        :return: The properties of this MdsQuery.  # noqa: E501
        :rtype: list[MdsQueryProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this MdsQuery.


        :param properties: The properties of this MdsQuery.  # noqa: E501
        :type: list[MdsQueryProperty]
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    @property
    def statement(self):
        """Gets the statement of this MdsQuery.  # noqa: E501


        :return: The statement of this MdsQuery.  # noqa: E501
        :rtype: str
        """
        return self._statement

    @statement.setter
    def statement(self, statement):
        """Sets the statement of this MdsQuery.


        :param statement: The statement of this MdsQuery.  # noqa: E501
        :type: str
        """
        if statement is None:
            raise ValueError("Invalid value for `statement`, must not be `None`")  # noqa: E501

        self._statement = statement

    @property
    def stylename(self):
        """Gets the stylename of this MdsQuery.  # noqa: E501


        :return: The stylename of this MdsQuery.  # noqa: E501
        :rtype: str
        """
        return self._stylename

    @stylename.setter
    def stylename(self, stylename):
        """Sets the stylename of this MdsQuery.


        :param stylename: The stylename of this MdsQuery.  # noqa: E501
        :type: str
        """
        if stylename is None:
            raise ValueError("Invalid value for `stylename`, must not be `None`")  # noqa: E501

        self._stylename = stylename

    @property
    def widget(self):
        """Gets the widget of this MdsQuery.  # noqa: E501


        :return: The widget of this MdsQuery.  # noqa: E501
        :rtype: str
        """
        return self._widget

    @widget.setter
    def widget(self, widget):
        """Sets the widget of this MdsQuery.


        :param widget: The widget of this MdsQuery.  # noqa: E501
        :type: str
        """
        if widget is None:
            raise ValueError("Invalid value for `widget`, must not be `None`")  # noqa: E501

        self._widget = widget

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MdsQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MdsQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
