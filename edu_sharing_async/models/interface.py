# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Interface(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'set': 'str',
        'metadata_prefix': 'str',
        'documentation': 'str',
        'format': 'str',
        'type': 'str'
    }

    attribute_map = {
        'url': 'url',
        'set': 'set',
        'metadata_prefix': 'metadataPrefix',
        'documentation': 'documentation',
        'format': 'format',
        'type': 'type'
    }

    def __init__(self, url=None, set=None, metadata_prefix=None, documentation=None, format=None, type=None):  # noqa: E501
        """Interface - a model defined in Swagger"""  # noqa: E501
        self._url = None
        self._set = None
        self._metadata_prefix = None
        self._documentation = None
        self._format = None
        self._type = None
        self.discriminator = None
        if url is not None:
            self.url = url
        if set is not None:
            self.set = set
        if metadata_prefix is not None:
            self.metadata_prefix = metadata_prefix
        if documentation is not None:
            self.documentation = documentation
        if format is not None:
            self.format = format
        if type is not None:
            self.type = type

    @property
    def url(self):
        """Gets the url of this Interface.  # noqa: E501


        :return: The url of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Interface.


        :param url: The url of this Interface.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def set(self):
        """Gets the set of this Interface.  # noqa: E501


        :return: The set of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._set

    @set.setter
    def set(self, set):
        """Sets the set of this Interface.


        :param set: The set of this Interface.  # noqa: E501
        :type: str
        """

        self._set = set

    @property
    def metadata_prefix(self):
        """Gets the metadata_prefix of this Interface.  # noqa: E501


        :return: The metadata_prefix of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._metadata_prefix

    @metadata_prefix.setter
    def metadata_prefix(self, metadata_prefix):
        """Sets the metadata_prefix of this Interface.


        :param metadata_prefix: The metadata_prefix of this Interface.  # noqa: E501
        :type: str
        """

        self._metadata_prefix = metadata_prefix

    @property
    def documentation(self):
        """Gets the documentation of this Interface.  # noqa: E501


        :return: The documentation of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._documentation

    @documentation.setter
    def documentation(self, documentation):
        """Sets the documentation of this Interface.


        :param documentation: The documentation of this Interface.  # noqa: E501
        :type: str
        """

        self._documentation = documentation

    @property
    def format(self):
        """Gets the format of this Interface.  # noqa: E501


        :return: The format of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Interface.


        :param format: The format of this Interface.  # noqa: E501
        :type: str
        """
        allowed_values = ["Json", "XML", "Text"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"  # noqa: E501
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def type(self):
        """Gets the type of this Interface.  # noqa: E501


        :return: The type of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Interface.


        :param type: The type of this Interface.  # noqa: E501
        :type: str
        """
        allowed_values = ["Search", "Sitemap", "Statistics", "OAI", "Generic_Api"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Interface, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Interface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
