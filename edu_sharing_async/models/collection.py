# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Collection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scope': 'str',
        'author_freetext': 'str',
        'level0': 'bool',
        'title': 'str',
        'description': 'str',
        'type': 'str',
        'viewtype': 'str',
        'order_mode': 'str',
        'x': 'int',
        'y': 'int',
        'z': 'int',
        'color': 'str',
        'from_user': 'bool',
        'pinned': 'bool',
        'child_collections_count': 'int',
        'child_references_count': 'int'
    }

    attribute_map = {
        'scope': 'scope',
        'author_freetext': 'authorFreetext',
        'level0': 'level0',
        'title': 'title',
        'description': 'description',
        'type': 'type',
        'viewtype': 'viewtype',
        'order_mode': 'orderMode',
        'x': 'x',
        'y': 'y',
        'z': 'z',
        'color': 'color',
        'from_user': 'fromUser',
        'pinned': 'pinned',
        'child_collections_count': 'childCollectionsCount',
        'child_references_count': 'childReferencesCount'
    }

    def __init__(self, scope=None, author_freetext=None, level0=False, title=None, description=None, type=None, viewtype=None, order_mode=None, x=None, y=None, z=None, color=None, from_user=False, pinned=False, child_collections_count=None, child_references_count=None):  # noqa: E501
        """Collection - a model defined in Swagger"""  # noqa: E501
        self._scope = None
        self._author_freetext = None
        self._level0 = None
        self._title = None
        self._description = None
        self._type = None
        self._viewtype = None
        self._order_mode = None
        self._x = None
        self._y = None
        self._z = None
        self._color = None
        self._from_user = None
        self._pinned = None
        self._child_collections_count = None
        self._child_references_count = None
        self.discriminator = None
        if scope is not None:
            self.scope = scope
        if author_freetext is not None:
            self.author_freetext = author_freetext
        self.level0 = level0
        self.title = title
        if description is not None:
            self.description = description
        self.type = type
        self.viewtype = viewtype
        if order_mode is not None:
            self.order_mode = order_mode
        if x is not None:
            self.x = x
        if y is not None:
            self.y = y
        if z is not None:
            self.z = z
        if color is not None:
            self.color = color
        self.from_user = from_user
        if pinned is not None:
            self.pinned = pinned
        if child_collections_count is not None:
            self.child_collections_count = child_collections_count
        if child_references_count is not None:
            self.child_references_count = child_references_count

    @property
    def scope(self):
        """Gets the scope of this Collection.  # noqa: E501


        :return: The scope of this Collection.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this Collection.


        :param scope: The scope of this Collection.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def author_freetext(self):
        """Gets the author_freetext of this Collection.  # noqa: E501


        :return: The author_freetext of this Collection.  # noqa: E501
        :rtype: str
        """
        return self._author_freetext

    @author_freetext.setter
    def author_freetext(self, author_freetext):
        """Sets the author_freetext of this Collection.


        :param author_freetext: The author_freetext of this Collection.  # noqa: E501
        :type: str
        """

        self._author_freetext = author_freetext

    @property
    def level0(self):
        """Gets the level0 of this Collection.  # noqa: E501

        false  # noqa: E501

        :return: The level0 of this Collection.  # noqa: E501
        :rtype: bool
        """
        return self._level0

    @level0.setter
    def level0(self, level0):
        """Sets the level0 of this Collection.

        false  # noqa: E501

        :param level0: The level0 of this Collection.  # noqa: E501
        :type: bool
        """
        if level0 is None:
            raise ValueError("Invalid value for `level0`, must not be `None`")  # noqa: E501

        self._level0 = level0

    @property
    def title(self):
        """Gets the title of this Collection.  # noqa: E501


        :return: The title of this Collection.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Collection.


        :param title: The title of this Collection.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this Collection.  # noqa: E501


        :return: The description of this Collection.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Collection.


        :param description: The description of this Collection.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this Collection.  # noqa: E501


        :return: The type of this Collection.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Collection.


        :param type: The type of this Collection.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def viewtype(self):
        """Gets the viewtype of this Collection.  # noqa: E501


        :return: The viewtype of this Collection.  # noqa: E501
        :rtype: str
        """
        return self._viewtype

    @viewtype.setter
    def viewtype(self, viewtype):
        """Sets the viewtype of this Collection.


        :param viewtype: The viewtype of this Collection.  # noqa: E501
        :type: str
        """
        if viewtype is None:
            raise ValueError("Invalid value for `viewtype`, must not be `None`")  # noqa: E501

        self._viewtype = viewtype

    @property
    def order_mode(self):
        """Gets the order_mode of this Collection.  # noqa: E501


        :return: The order_mode of this Collection.  # noqa: E501
        :rtype: str
        """
        return self._order_mode

    @order_mode.setter
    def order_mode(self, order_mode):
        """Sets the order_mode of this Collection.


        :param order_mode: The order_mode of this Collection.  # noqa: E501
        :type: str
        """

        self._order_mode = order_mode

    @property
    def x(self):
        """Gets the x of this Collection.  # noqa: E501


        :return: The x of this Collection.  # noqa: E501
        :rtype: int
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this Collection.


        :param x: The x of this Collection.  # noqa: E501
        :type: int
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this Collection.  # noqa: E501


        :return: The y of this Collection.  # noqa: E501
        :rtype: int
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this Collection.


        :param y: The y of this Collection.  # noqa: E501
        :type: int
        """

        self._y = y

    @property
    def z(self):
        """Gets the z of this Collection.  # noqa: E501


        :return: The z of this Collection.  # noqa: E501
        :rtype: int
        """
        return self._z

    @z.setter
    def z(self, z):
        """Sets the z of this Collection.


        :param z: The z of this Collection.  # noqa: E501
        :type: int
        """

        self._z = z

    @property
    def color(self):
        """Gets the color of this Collection.  # noqa: E501


        :return: The color of this Collection.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Collection.


        :param color: The color of this Collection.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def from_user(self):
        """Gets the from_user of this Collection.  # noqa: E501

        false  # noqa: E501

        :return: The from_user of this Collection.  # noqa: E501
        :rtype: bool
        """
        return self._from_user

    @from_user.setter
    def from_user(self, from_user):
        """Sets the from_user of this Collection.

        false  # noqa: E501

        :param from_user: The from_user of this Collection.  # noqa: E501
        :type: bool
        """
        if from_user is None:
            raise ValueError("Invalid value for `from_user`, must not be `None`")  # noqa: E501

        self._from_user = from_user

    @property
    def pinned(self):
        """Gets the pinned of this Collection.  # noqa: E501


        :return: The pinned of this Collection.  # noqa: E501
        :rtype: bool
        """
        return self._pinned

    @pinned.setter
    def pinned(self, pinned):
        """Sets the pinned of this Collection.


        :param pinned: The pinned of this Collection.  # noqa: E501
        :type: bool
        """

        self._pinned = pinned

    @property
    def child_collections_count(self):
        """Gets the child_collections_count of this Collection.  # noqa: E501


        :return: The child_collections_count of this Collection.  # noqa: E501
        :rtype: int
        """
        return self._child_collections_count

    @child_collections_count.setter
    def child_collections_count(self, child_collections_count):
        """Sets the child_collections_count of this Collection.


        :param child_collections_count: The child_collections_count of this Collection.  # noqa: E501
        :type: int
        """

        self._child_collections_count = child_collections_count

    @property
    def child_references_count(self):
        """Gets the child_references_count of this Collection.  # noqa: E501


        :return: The child_references_count of this Collection.  # noqa: E501
        :rtype: int
        """
        return self._child_references_count

    @child_references_count.setter
    def child_references_count(self, child_references_count):
        """Sets the child_references_count of this Collection.


        :param child_references_count: The child_references_count of this Collection.  # noqa: E501
        :type: int
        """

        self._child_references_count = child_references_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Collection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Collection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
