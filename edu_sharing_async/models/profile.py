# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Profile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_email': 'str',
        'mediacenter': 'MediacenterProfileExtension',
        'display_name': 'str',
        'group_type': 'str',
        'scope_type': 'str'
    }

    attribute_map = {
        'group_email': 'groupEmail',
        'mediacenter': 'mediacenter',
        'display_name': 'displayName',
        'group_type': 'groupType',
        'scope_type': 'scopeType'
    }

    def __init__(self, group_email=None, mediacenter=None, display_name=None, group_type=None, scope_type=None):  # noqa: E501
        """Profile - a model defined in Swagger"""  # noqa: E501
        self._group_email = None
        self._mediacenter = None
        self._display_name = None
        self._group_type = None
        self._scope_type = None
        self.discriminator = None
        if group_email is not None:
            self.group_email = group_email
        if mediacenter is not None:
            self.mediacenter = mediacenter
        if display_name is not None:
            self.display_name = display_name
        if group_type is not None:
            self.group_type = group_type
        if scope_type is not None:
            self.scope_type = scope_type

    @property
    def group_email(self):
        """Gets the group_email of this Profile.  # noqa: E501


        :return: The group_email of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._group_email

    @group_email.setter
    def group_email(self, group_email):
        """Sets the group_email of this Profile.


        :param group_email: The group_email of this Profile.  # noqa: E501
        :type: str
        """

        self._group_email = group_email

    @property
    def mediacenter(self):
        """Gets the mediacenter of this Profile.  # noqa: E501


        :return: The mediacenter of this Profile.  # noqa: E501
        :rtype: MediacenterProfileExtension
        """
        return self._mediacenter

    @mediacenter.setter
    def mediacenter(self, mediacenter):
        """Sets the mediacenter of this Profile.


        :param mediacenter: The mediacenter of this Profile.  # noqa: E501
        :type: MediacenterProfileExtension
        """

        self._mediacenter = mediacenter

    @property
    def display_name(self):
        """Gets the display_name of this Profile.  # noqa: E501


        :return: The display_name of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Profile.


        :param display_name: The display_name of this Profile.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def group_type(self):
        """Gets the group_type of this Profile.  # noqa: E501


        :return: The group_type of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._group_type

    @group_type.setter
    def group_type(self, group_type):
        """Sets the group_type of this Profile.


        :param group_type: The group_type of this Profile.  # noqa: E501
        :type: str
        """

        self._group_type = group_type

    @property
    def scope_type(self):
        """Gets the scope_type of this Profile.  # noqa: E501


        :return: The scope_type of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._scope_type

    @scope_type.setter
    def scope_type(self, scope_type):
        """Sets the scope_type of this Profile.


        :param scope_type: The scope_type of this Profile.  # noqa: E501
        :type: str
        """

        self._scope_type = scope_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Profile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Profile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
