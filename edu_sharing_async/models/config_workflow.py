# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConfigWorkflow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'default_receiver': 'str',
        'default_status': 'str',
        'comment_required': 'bool',
        'workflows': 'list[ConfigWorkflowList]'
    }

    attribute_map = {
        'default_receiver': 'defaultReceiver',
        'default_status': 'defaultStatus',
        'comment_required': 'commentRequired',
        'workflows': 'workflows'
    }

    def __init__(self, default_receiver=None, default_status=None, comment_required=False, workflows=None):  # noqa: E501
        """ConfigWorkflow - a model defined in Swagger"""  # noqa: E501
        self._default_receiver = None
        self._default_status = None
        self._comment_required = None
        self._workflows = None
        self.discriminator = None
        if default_receiver is not None:
            self.default_receiver = default_receiver
        if default_status is not None:
            self.default_status = default_status
        if comment_required is not None:
            self.comment_required = comment_required
        if workflows is not None:
            self.workflows = workflows

    @property
    def default_receiver(self):
        """Gets the default_receiver of this ConfigWorkflow.  # noqa: E501


        :return: The default_receiver of this ConfigWorkflow.  # noqa: E501
        :rtype: str
        """
        return self._default_receiver

    @default_receiver.setter
    def default_receiver(self, default_receiver):
        """Sets the default_receiver of this ConfigWorkflow.


        :param default_receiver: The default_receiver of this ConfigWorkflow.  # noqa: E501
        :type: str
        """

        self._default_receiver = default_receiver

    @property
    def default_status(self):
        """Gets the default_status of this ConfigWorkflow.  # noqa: E501


        :return: The default_status of this ConfigWorkflow.  # noqa: E501
        :rtype: str
        """
        return self._default_status

    @default_status.setter
    def default_status(self, default_status):
        """Sets the default_status of this ConfigWorkflow.


        :param default_status: The default_status of this ConfigWorkflow.  # noqa: E501
        :type: str
        """

        self._default_status = default_status

    @property
    def comment_required(self):
        """Gets the comment_required of this ConfigWorkflow.  # noqa: E501


        :return: The comment_required of this ConfigWorkflow.  # noqa: E501
        :rtype: bool
        """
        return self._comment_required

    @comment_required.setter
    def comment_required(self, comment_required):
        """Sets the comment_required of this ConfigWorkflow.


        :param comment_required: The comment_required of this ConfigWorkflow.  # noqa: E501
        :type: bool
        """

        self._comment_required = comment_required

    @property
    def workflows(self):
        """Gets the workflows of this ConfigWorkflow.  # noqa: E501


        :return: The workflows of this ConfigWorkflow.  # noqa: E501
        :rtype: list[ConfigWorkflowList]
        """
        return self._workflows

    @workflows.setter
    def workflows(self, workflows):
        """Sets the workflows of this ConfigWorkflow.


        :param workflows: The workflows of this ConfigWorkflow.  # noqa: E501
        :type: list[ConfigWorkflowList]
        """

        self._workflows = workflows

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigWorkflow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigWorkflow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
