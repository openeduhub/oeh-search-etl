# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CacheCluster(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instances': 'list[CacheMember]',
        'cache_infos': 'list[CacheInfo]',
        'local_member': 'str',
        'free_memory': 'int',
        'total_memory': 'int',
        'max_memory': 'int',
        'available_processors': 'int',
        'time_stamp': 'datetime',
        'group_name': 'str'
    }

    attribute_map = {
        'instances': 'instances',
        'cache_infos': 'cacheInfos',
        'local_member': 'localMember',
        'free_memory': 'freeMemory',
        'total_memory': 'totalMemory',
        'max_memory': 'maxMemory',
        'available_processors': 'availableProcessors',
        'time_stamp': 'timeStamp',
        'group_name': 'groupName'
    }

    def __init__(self, instances=None, cache_infos=None, local_member=None, free_memory=None, total_memory=None, max_memory=None, available_processors=None, time_stamp=None, group_name=None):  # noqa: E501
        """CacheCluster - a model defined in Swagger"""  # noqa: E501
        self._instances = None
        self._cache_infos = None
        self._local_member = None
        self._free_memory = None
        self._total_memory = None
        self._max_memory = None
        self._available_processors = None
        self._time_stamp = None
        self._group_name = None
        self.discriminator = None
        if instances is not None:
            self.instances = instances
        if cache_infos is not None:
            self.cache_infos = cache_infos
        if local_member is not None:
            self.local_member = local_member
        if free_memory is not None:
            self.free_memory = free_memory
        if total_memory is not None:
            self.total_memory = total_memory
        if max_memory is not None:
            self.max_memory = max_memory
        if available_processors is not None:
            self.available_processors = available_processors
        if time_stamp is not None:
            self.time_stamp = time_stamp
        if group_name is not None:
            self.group_name = group_name

    @property
    def instances(self):
        """Gets the instances of this CacheCluster.  # noqa: E501


        :return: The instances of this CacheCluster.  # noqa: E501
        :rtype: list[CacheMember]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this CacheCluster.


        :param instances: The instances of this CacheCluster.  # noqa: E501
        :type: list[CacheMember]
        """

        self._instances = instances

    @property
    def cache_infos(self):
        """Gets the cache_infos of this CacheCluster.  # noqa: E501


        :return: The cache_infos of this CacheCluster.  # noqa: E501
        :rtype: list[CacheInfo]
        """
        return self._cache_infos

    @cache_infos.setter
    def cache_infos(self, cache_infos):
        """Sets the cache_infos of this CacheCluster.


        :param cache_infos: The cache_infos of this CacheCluster.  # noqa: E501
        :type: list[CacheInfo]
        """

        self._cache_infos = cache_infos

    @property
    def local_member(self):
        """Gets the local_member of this CacheCluster.  # noqa: E501


        :return: The local_member of this CacheCluster.  # noqa: E501
        :rtype: str
        """
        return self._local_member

    @local_member.setter
    def local_member(self, local_member):
        """Sets the local_member of this CacheCluster.


        :param local_member: The local_member of this CacheCluster.  # noqa: E501
        :type: str
        """

        self._local_member = local_member

    @property
    def free_memory(self):
        """Gets the free_memory of this CacheCluster.  # noqa: E501


        :return: The free_memory of this CacheCluster.  # noqa: E501
        :rtype: int
        """
        return self._free_memory

    @free_memory.setter
    def free_memory(self, free_memory):
        """Sets the free_memory of this CacheCluster.


        :param free_memory: The free_memory of this CacheCluster.  # noqa: E501
        :type: int
        """

        self._free_memory = free_memory

    @property
    def total_memory(self):
        """Gets the total_memory of this CacheCluster.  # noqa: E501


        :return: The total_memory of this CacheCluster.  # noqa: E501
        :rtype: int
        """
        return self._total_memory

    @total_memory.setter
    def total_memory(self, total_memory):
        """Sets the total_memory of this CacheCluster.


        :param total_memory: The total_memory of this CacheCluster.  # noqa: E501
        :type: int
        """

        self._total_memory = total_memory

    @property
    def max_memory(self):
        """Gets the max_memory of this CacheCluster.  # noqa: E501


        :return: The max_memory of this CacheCluster.  # noqa: E501
        :rtype: int
        """
        return self._max_memory

    @max_memory.setter
    def max_memory(self, max_memory):
        """Sets the max_memory of this CacheCluster.


        :param max_memory: The max_memory of this CacheCluster.  # noqa: E501
        :type: int
        """

        self._max_memory = max_memory

    @property
    def available_processors(self):
        """Gets the available_processors of this CacheCluster.  # noqa: E501


        :return: The available_processors of this CacheCluster.  # noqa: E501
        :rtype: int
        """
        return self._available_processors

    @available_processors.setter
    def available_processors(self, available_processors):
        """Sets the available_processors of this CacheCluster.


        :param available_processors: The available_processors of this CacheCluster.  # noqa: E501
        :type: int
        """

        self._available_processors = available_processors

    @property
    def time_stamp(self):
        """Gets the time_stamp of this CacheCluster.  # noqa: E501


        :return: The time_stamp of this CacheCluster.  # noqa: E501
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this CacheCluster.


        :param time_stamp: The time_stamp of this CacheCluster.  # noqa: E501
        :type: datetime
        """

        self._time_stamp = time_stamp

    @property
    def group_name(self):
        """Gets the group_name of this CacheCluster.  # noqa: E501


        :return: The group_name of this CacheCluster.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this CacheCluster.


        :param group_name: The group_name of this CacheCluster.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CacheCluster, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CacheCluster):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
