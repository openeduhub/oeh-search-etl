# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NodeVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'properties': 'dict(str, list[str])',
        'version': 'NodeVersionRef',
        'comment': 'str',
        'modified_at': 'str',
        'modified_by': 'Person',
        'content_url': 'str'
    }

    attribute_map = {
        'properties': 'properties',
        'version': 'version',
        'comment': 'comment',
        'modified_at': 'modifiedAt',
        'modified_by': 'modifiedBy',
        'content_url': 'contentUrl'
    }

    def __init__(self, properties=None, version=None, comment=None, modified_at=None, modified_by=None, content_url=None):  # noqa: E501
        """NodeVersion - a model defined in Swagger"""  # noqa: E501
        self._properties = None
        self._version = None
        self._comment = None
        self._modified_at = None
        self._modified_by = None
        self._content_url = None
        self.discriminator = None
        if properties is not None:
            self.properties = properties
        self.version = version
        self.comment = comment
        self.modified_at = modified_at
        self.modified_by = modified_by
        if content_url is not None:
            self.content_url = content_url

    @property
    def properties(self):
        """Gets the properties of this NodeVersion.  # noqa: E501


        :return: The properties of this NodeVersion.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this NodeVersion.


        :param properties: The properties of this NodeVersion.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._properties = properties

    @property
    def version(self):
        """Gets the version of this NodeVersion.  # noqa: E501


        :return: The version of this NodeVersion.  # noqa: E501
        :rtype: NodeVersionRef
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this NodeVersion.


        :param version: The version of this NodeVersion.  # noqa: E501
        :type: NodeVersionRef
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def comment(self):
        """Gets the comment of this NodeVersion.  # noqa: E501


        :return: The comment of this NodeVersion.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this NodeVersion.


        :param comment: The comment of this NodeVersion.  # noqa: E501
        :type: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")  # noqa: E501

        self._comment = comment

    @property
    def modified_at(self):
        """Gets the modified_at of this NodeVersion.  # noqa: E501


        :return: The modified_at of this NodeVersion.  # noqa: E501
        :rtype: str
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this NodeVersion.


        :param modified_at: The modified_at of this NodeVersion.  # noqa: E501
        :type: str
        """
        if modified_at is None:
            raise ValueError("Invalid value for `modified_at`, must not be `None`")  # noqa: E501

        self._modified_at = modified_at

    @property
    def modified_by(self):
        """Gets the modified_by of this NodeVersion.  # noqa: E501


        :return: The modified_by of this NodeVersion.  # noqa: E501
        :rtype: Person
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this NodeVersion.


        :param modified_by: The modified_by of this NodeVersion.  # noqa: E501
        :type: Person
        """
        if modified_by is None:
            raise ValueError("Invalid value for `modified_by`, must not be `None`")  # noqa: E501

        self._modified_by = modified_by

    @property
    def content_url(self):
        """Gets the content_url of this NodeVersion.  # noqa: E501


        :return: The content_url of this NodeVersion.  # noqa: E501
        :rtype: str
        """
        return self._content_url

    @content_url.setter
    def content_url(self, content_url):
        """Sets the content_url of this NodeVersion.


        :param content_url: The content_url of this NodeVersion.  # noqa: E501
        :type: str
        """

        self._content_url = content_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
