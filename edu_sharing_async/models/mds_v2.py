# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MdsV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'create': 'Create',
        'widgets': 'list[WidgetV2]',
        'views': 'list[ViewV2]',
        'groups': 'list[GroupV2]',
        'lists': 'list[ListV2]',
        'sorts': 'list[SortV2]'
    }

    attribute_map = {
        'name': 'name',
        'create': 'create',
        'widgets': 'widgets',
        'views': 'views',
        'groups': 'groups',
        'lists': 'lists',
        'sorts': 'sorts'
    }

    def __init__(self, name=None, create=None, widgets=None, views=None, groups=None, lists=None, sorts=None):  # noqa: E501
        """MdsV2 - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._create = None
        self._widgets = None
        self._views = None
        self._groups = None
        self._lists = None
        self._sorts = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if create is not None:
            self.create = create
        if widgets is not None:
            self.widgets = widgets
        if views is not None:
            self.views = views
        if groups is not None:
            self.groups = groups
        if lists is not None:
            self.lists = lists
        if sorts is not None:
            self.sorts = sorts

    @property
    def name(self):
        """Gets the name of this MdsV2.  # noqa: E501


        :return: The name of this MdsV2.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MdsV2.


        :param name: The name of this MdsV2.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def create(self):
        """Gets the create of this MdsV2.  # noqa: E501


        :return: The create of this MdsV2.  # noqa: E501
        :rtype: Create
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this MdsV2.


        :param create: The create of this MdsV2.  # noqa: E501
        :type: Create
        """

        self._create = create

    @property
    def widgets(self):
        """Gets the widgets of this MdsV2.  # noqa: E501


        :return: The widgets of this MdsV2.  # noqa: E501
        :rtype: list[WidgetV2]
        """
        return self._widgets

    @widgets.setter
    def widgets(self, widgets):
        """Sets the widgets of this MdsV2.


        :param widgets: The widgets of this MdsV2.  # noqa: E501
        :type: list[WidgetV2]
        """

        self._widgets = widgets

    @property
    def views(self):
        """Gets the views of this MdsV2.  # noqa: E501


        :return: The views of this MdsV2.  # noqa: E501
        :rtype: list[ViewV2]
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this MdsV2.


        :param views: The views of this MdsV2.  # noqa: E501
        :type: list[ViewV2]
        """

        self._views = views

    @property
    def groups(self):
        """Gets the groups of this MdsV2.  # noqa: E501


        :return: The groups of this MdsV2.  # noqa: E501
        :rtype: list[GroupV2]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this MdsV2.


        :param groups: The groups of this MdsV2.  # noqa: E501
        :type: list[GroupV2]
        """

        self._groups = groups

    @property
    def lists(self):
        """Gets the lists of this MdsV2.  # noqa: E501


        :return: The lists of this MdsV2.  # noqa: E501
        :rtype: list[ListV2]
        """
        return self._lists

    @lists.setter
    def lists(self, lists):
        """Sets the lists of this MdsV2.


        :param lists: The lists of this MdsV2.  # noqa: E501
        :type: list[ListV2]
        """

        self._lists = lists

    @property
    def sorts(self):
        """Gets the sorts of this MdsV2.  # noqa: E501


        :return: The sorts of this MdsV2.  # noqa: E501
        :rtype: list[SortV2]
        """
        return self._sorts

    @sorts.setter
    def sorts(self, sorts):
        """Sets the sorts of this MdsV2.


        :param sorts: The sorts of this MdsV2.  # noqa: E501
        :type: list[SortV2]
        """

        self._sorts = sorts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MdsV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MdsV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
