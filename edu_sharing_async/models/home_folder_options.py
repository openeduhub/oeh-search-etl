# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HomeFolderOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'folders': 'str',
        'private_files': 'str',
        'cc_files': 'str',
        'keep_folder_structure': 'bool'
    }

    attribute_map = {
        'folders': 'folders',
        'private_files': 'privateFiles',
        'cc_files': 'ccFiles',
        'keep_folder_structure': 'keepFolderStructure'
    }

    def __init__(self, folders=None, private_files=None, cc_files=None, keep_folder_structure=False):  # noqa: E501
        """HomeFolderOptions - a model defined in Swagger"""  # noqa: E501
        self._folders = None
        self._private_files = None
        self._cc_files = None
        self._keep_folder_structure = None
        self.discriminator = None
        if folders is not None:
            self.folders = folders
        if private_files is not None:
            self.private_files = private_files
        if cc_files is not None:
            self.cc_files = cc_files
        if keep_folder_structure is not None:
            self.keep_folder_structure = keep_folder_structure

    @property
    def folders(self):
        """Gets the folders of this HomeFolderOptions.  # noqa: E501


        :return: The folders of this HomeFolderOptions.  # noqa: E501
        :rtype: str
        """
        return self._folders

    @folders.setter
    def folders(self, folders):
        """Sets the folders of this HomeFolderOptions.


        :param folders: The folders of this HomeFolderOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "assign"]  # noqa: E501
        if folders not in allowed_values:
            raise ValueError(
                "Invalid value for `folders` ({0}), must be one of {1}"  # noqa: E501
                .format(folders, allowed_values)
            )

        self._folders = folders

    @property
    def private_files(self):
        """Gets the private_files of this HomeFolderOptions.  # noqa: E501


        :return: The private_files of this HomeFolderOptions.  # noqa: E501
        :rtype: str
        """
        return self._private_files

    @private_files.setter
    def private_files(self, private_files):
        """Sets the private_files of this HomeFolderOptions.


        :param private_files: The private_files of this HomeFolderOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "assign", "delete"]  # noqa: E501
        if private_files not in allowed_values:
            raise ValueError(
                "Invalid value for `private_files` ({0}), must be one of {1}"  # noqa: E501
                .format(private_files, allowed_values)
            )

        self._private_files = private_files

    @property
    def cc_files(self):
        """Gets the cc_files of this HomeFolderOptions.  # noqa: E501


        :return: The cc_files of this HomeFolderOptions.  # noqa: E501
        :rtype: str
        """
        return self._cc_files

    @cc_files.setter
    def cc_files(self, cc_files):
        """Sets the cc_files of this HomeFolderOptions.


        :param cc_files: The cc_files of this HomeFolderOptions.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "assign", "delete"]  # noqa: E501
        if cc_files not in allowed_values:
            raise ValueError(
                "Invalid value for `cc_files` ({0}), must be one of {1}"  # noqa: E501
                .format(cc_files, allowed_values)
            )

        self._cc_files = cc_files

    @property
    def keep_folder_structure(self):
        """Gets the keep_folder_structure of this HomeFolderOptions.  # noqa: E501


        :return: The keep_folder_structure of this HomeFolderOptions.  # noqa: E501
        :rtype: bool
        """
        return self._keep_folder_structure

    @keep_folder_structure.setter
    def keep_folder_structure(self, keep_folder_structure):
        """Sets the keep_folder_structure of this HomeFolderOptions.


        :param keep_folder_structure: The keep_folder_structure of this HomeFolderOptions.  # noqa: E501
        :type: bool
        """

        self._keep_folder_structure = keep_folder_structure

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HomeFolderOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HomeFolderOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
