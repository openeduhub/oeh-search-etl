# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from edu_sharing_client.api_client import ApiClient


class MEDIACENTERV1Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_mediacenter_group(self, repository, mediacenter, group, **kwargs):  # noqa: E501
        """add a group that is managed by the given mediacenter  # noqa: E501

        although not restricted, it is recommended that the group is an edu-sharing organization (admin rights are required)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_mediacenter_group(repository, mediacenter, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str mediacenter: authorityName of the mediacenter that should manage the group (required)
        :param str group: authorityName of the group that should be managed by that mediacenter (required)
        :return: list[Group]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_mediacenter_group_with_http_info(repository, mediacenter, group, **kwargs)  # noqa: E501
        else:
            (data) = self.add_mediacenter_group_with_http_info(repository, mediacenter, group, **kwargs)  # noqa: E501
            return data

    def add_mediacenter_group_with_http_info(self, repository, mediacenter, group, **kwargs):  # noqa: E501
        """add a group that is managed by the given mediacenter  # noqa: E501

        although not restricted, it is recommended that the group is an edu-sharing organization (admin rights are required)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_mediacenter_group_with_http_info(repository, mediacenter, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str mediacenter: authorityName of the mediacenter that should manage the group (required)
        :param str group: authorityName of the group that should be managed by that mediacenter (required)
        :return: list[Group]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository', 'mediacenter', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_mediacenter_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `add_mediacenter_group`")  # noqa: E501
        # verify the required parameter 'mediacenter' is set
        if ('mediacenter' not in params or
                params['mediacenter'] is None):
            raise ValueError("Missing the required parameter `mediacenter` when calling `add_mediacenter_group`")  # noqa: E501
        # verify the required parameter 'group' is set
        if ('group' not in params or
                params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `add_mediacenter_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'mediacenter' in params:
            path_params['mediacenter'] = params['mediacenter']  # noqa: E501
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mediacenter/v1/mediacenter/{repository}/{mediacenter}/manages/{group}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Group]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_mediacenter(self, repository, mediacenter, **kwargs):  # noqa: E501
        """create new mediacenter in repository.  # noqa: E501

        admin rights are required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_mediacenter(repository, mediacenter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str mediacenter: mediacenter name (required)
        :param Profile body:
        :return: Mediacenter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_mediacenter_with_http_info(repository, mediacenter, **kwargs)  # noqa: E501
        else:
            (data) = self.create_mediacenter_with_http_info(repository, mediacenter, **kwargs)  # noqa: E501
            return data

    def create_mediacenter_with_http_info(self, repository, mediacenter, **kwargs):  # noqa: E501
        """create new mediacenter in repository.  # noqa: E501

        admin rights are required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_mediacenter_with_http_info(repository, mediacenter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str mediacenter: mediacenter name (required)
        :param Profile body:
        :return: Mediacenter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository', 'mediacenter', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_mediacenter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `create_mediacenter`")  # noqa: E501
        # verify the required parameter 'mediacenter' is set
        if ('mediacenter' not in params or
                params['mediacenter'] is None):
            raise ValueError("Missing the required parameter `mediacenter` when calling `create_mediacenter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'mediacenter' in params:
            path_params['mediacenter'] = params['mediacenter']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mediacenter/v1/mediacenter/{repository}/{mediacenter}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mediacenter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_mediacenter(self, repository, mediacenter, **kwargs):  # noqa: E501
        """delete a mediacenter group and it's admin group and proxy group  # noqa: E501

        admin rights are required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_mediacenter(repository, mediacenter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str mediacenter: authorityName of the mediacenter that should manage the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_mediacenter_with_http_info(repository, mediacenter, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_mediacenter_with_http_info(repository, mediacenter, **kwargs)  # noqa: E501
            return data

    def delete_mediacenter_with_http_info(self, repository, mediacenter, **kwargs):  # noqa: E501
        """delete a mediacenter group and it's admin group and proxy group  # noqa: E501

        admin rights are required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_mediacenter_with_http_info(repository, mediacenter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str mediacenter: authorityName of the mediacenter that should manage the group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository', 'mediacenter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_mediacenter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `delete_mediacenter`")  # noqa: E501
        # verify the required parameter 'mediacenter' is set
        if ('mediacenter' not in params or
                params['mediacenter'] is None):
            raise ValueError("Missing the required parameter `mediacenter` when calling `delete_mediacenter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'mediacenter' in params:
            path_params['mediacenter'] = params['mediacenter']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mediacenter/v1/mediacenter/{repository}/{mediacenter}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_mediacenter(self, repository, mediacenter, **kwargs):  # noqa: E501
        """edit a mediacenter in repository.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_mediacenter(repository, mediacenter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str mediacenter: mediacenter name (required)
        :param Profile body:
        :return: Mediacenter
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_mediacenter_with_http_info(repository, mediacenter, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_mediacenter_with_http_info(repository, mediacenter, **kwargs)  # noqa: E501
            return data

    def edit_mediacenter_with_http_info(self, repository, mediacenter, **kwargs):  # noqa: E501
        """edit a mediacenter in repository.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_mediacenter_with_http_info(repository, mediacenter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str mediacenter: mediacenter name (required)
        :param Profile body:
        :return: Mediacenter
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository', 'mediacenter', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_mediacenter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `edit_mediacenter`")  # noqa: E501
        # verify the required parameter 'mediacenter' is set
        if ('mediacenter' not in params or
                params['mediacenter'] is None):
            raise ValueError("Missing the required parameter `mediacenter` when calling `edit_mediacenter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'mediacenter' in params:
            path_params['mediacenter'] = params['mediacenter']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mediacenter/v1/mediacenter/{repository}/{mediacenter}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Mediacenter',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mediacenter_groups(self, repository, mediacenter, **kwargs):  # noqa: E501
        """get groups that are managed by the given mediacenter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mediacenter_groups(repository, mediacenter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str mediacenter: authorityName of the mediacenter that should manage the group (required)
        :return: list[Group]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mediacenter_groups_with_http_info(repository, mediacenter, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mediacenter_groups_with_http_info(repository, mediacenter, **kwargs)  # noqa: E501
            return data

    def get_mediacenter_groups_with_http_info(self, repository, mediacenter, **kwargs):  # noqa: E501
        """get groups that are managed by the given mediacenter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mediacenter_groups_with_http_info(repository, mediacenter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str mediacenter: authorityName of the mediacenter that should manage the group (required)
        :return: list[Group]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository', 'mediacenter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mediacenter_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `get_mediacenter_groups`")  # noqa: E501
        # verify the required parameter 'mediacenter' is set
        if ('mediacenter' not in params or
                params['mediacenter'] is None):
            raise ValueError("Missing the required parameter `mediacenter` when calling `get_mediacenter_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'mediacenter' in params:
            path_params['mediacenter'] = params['mediacenter']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mediacenter/v1/mediacenter/{repository}/{mediacenter}/manages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Group]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mediacenter_licensed_nodes(self, body, searchword, repository, mediacenter, **kwargs):  # noqa: E501
        """get nodes that are licensed by the given mediacenter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mediacenter_licensed_nodes(body, searchword, repository, mediacenter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchParameters body: search parameters (required)
        :param str searchword: searchword of licensed nodes (required)
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str mediacenter: authorityName of the mediacenter that licenses nodes (required)
        :param int max_items: maximum items per page
        :param int skip_count: skip a number of items
        :param list[str] sort_properties: sort properties
        :param list[bool] sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :param list[str] property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :return: list[Group]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mediacenter_licensed_nodes_with_http_info(body, searchword, repository, mediacenter, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mediacenter_licensed_nodes_with_http_info(body, searchword, repository, mediacenter, **kwargs)  # noqa: E501
            return data

    def get_mediacenter_licensed_nodes_with_http_info(self, body, searchword, repository, mediacenter, **kwargs):  # noqa: E501
        """get nodes that are licensed by the given mediacenter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mediacenter_licensed_nodes_with_http_info(body, searchword, repository, mediacenter, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchParameters body: search parameters (required)
        :param str searchword: searchword of licensed nodes (required)
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str mediacenter: authorityName of the mediacenter that licenses nodes (required)
        :param int max_items: maximum items per page
        :param int skip_count: skip a number of items
        :param list[str] sort_properties: sort properties
        :param list[bool] sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :param list[str] property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :return: list[Group]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'searchword', 'repository', 'mediacenter', 'max_items', 'skip_count', 'sort_properties', 'sort_ascending', 'property_filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mediacenter_licensed_nodes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_mediacenter_licensed_nodes`")  # noqa: E501
        # verify the required parameter 'searchword' is set
        if ('searchword' not in params or
                params['searchword'] is None):
            raise ValueError("Missing the required parameter `searchword` when calling `get_mediacenter_licensed_nodes`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `get_mediacenter_licensed_nodes`")  # noqa: E501
        # verify the required parameter 'mediacenter' is set
        if ('mediacenter' not in params or
                params['mediacenter'] is None):
            raise ValueError("Missing the required parameter `mediacenter` when calling `get_mediacenter_licensed_nodes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'mediacenter' in params:
            path_params['mediacenter'] = params['mediacenter']  # noqa: E501

        query_params = []
        if 'max_items' in params:
            query_params.append(('maxItems', params['max_items']))  # noqa: E501
        if 'skip_count' in params:
            query_params.append(('skipCount', params['skip_count']))  # noqa: E501
        if 'sort_properties' in params:
            query_params.append(('sortProperties', params['sort_properties']))  # noqa: E501
            collection_formats['sortProperties'] = 'multi'  # noqa: E501
        if 'sort_ascending' in params:
            query_params.append(('sortAscending', params['sort_ascending']))  # noqa: E501
            collection_formats['sortAscending'] = 'multi'  # noqa: E501
        if 'property_filter' in params:
            query_params.append(('propertyFilter', params['property_filter']))  # noqa: E501
            collection_formats['propertyFilter'] = 'multi'  # noqa: E501
        if 'searchword' in params:
            query_params.append(('searchword', params['searchword']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mediacenter/v1/mediacenter/{repository}/{mediacenter}/licenses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Group]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mediacenters(self, repository, **kwargs):  # noqa: E501
        """get mediacenters in the repository.  # noqa: E501

        Only shows the one available/managing the current user (only admin can access all)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mediacenters(repository, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :return: list[Mediacenter]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mediacenters_with_http_info(repository, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mediacenters_with_http_info(repository, **kwargs)  # noqa: E501
            return data

    def get_mediacenters_with_http_info(self, repository, **kwargs):  # noqa: E501
        """get mediacenters in the repository.  # noqa: E501

        Only shows the one available/managing the current user (only admin can access all)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mediacenters_with_http_info(repository, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :return: list[Mediacenter]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mediacenters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `get_mediacenters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mediacenter/v1/mediacenter/{repository}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Mediacenter]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_mc_org_connections(self, mc_orgs, **kwargs):  # noqa: E501
        """Import Mediacenter Organisation Connection  # noqa: E501

        Import Mediacenter Organisation Connection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_mc_org_connections(mc_orgs, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mc_orgs: (required)
        :param bool remove_schools_from_mc: removeSchoolsFromMC
        :return: McOrgConnectResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.import_mc_org_connections_with_http_info(mc_orgs, **kwargs)  # noqa: E501
        else:
            (data) = self.import_mc_org_connections_with_http_info(mc_orgs, **kwargs)  # noqa: E501
            return data

    def import_mc_org_connections_with_http_info(self, mc_orgs, **kwargs):  # noqa: E501
        """Import Mediacenter Organisation Connection  # noqa: E501

        Import Mediacenter Organisation Connection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_mc_org_connections_with_http_info(mc_orgs, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mc_orgs: (required)
        :param bool remove_schools_from_mc: removeSchoolsFromMC
        :return: McOrgConnectResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mc_orgs', 'remove_schools_from_mc']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_mc_org_connections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mc_orgs' is set
        if ('mc_orgs' not in params or
                params['mc_orgs'] is None):
            raise ValueError("Missing the required parameter `mc_orgs` when calling `import_mc_org_connections`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'remove_schools_from_mc' in params:
            query_params.append(('removeSchoolsFromMC', params['remove_schools_from_mc']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'mc_orgs' in params:
            local_var_files['mcOrgs'] = params['mc_orgs']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mediacenter/v1/import/mc_org', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='McOrgConnectResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_mediacenters(self, mediacenters, **kwargs):  # noqa: E501
        """Import mediacenters  # noqa: E501

        Import mediacenters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_mediacenters(mediacenters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mediacenters: (required)
        :return: MediacentersImportResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.import_mediacenters_with_http_info(mediacenters, **kwargs)  # noqa: E501
        else:
            (data) = self.import_mediacenters_with_http_info(mediacenters, **kwargs)  # noqa: E501
            return data

    def import_mediacenters_with_http_info(self, mediacenters, **kwargs):  # noqa: E501
        """Import mediacenters  # noqa: E501

        Import mediacenters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_mediacenters_with_http_info(mediacenters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mediacenters: (required)
        :return: MediacentersImportResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mediacenters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_mediacenters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mediacenters' is set
        if ('mediacenters' not in params or
                params['mediacenters'] is None):
            raise ValueError("Missing the required parameter `mediacenters` when calling `import_mediacenters`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'mediacenters' in params:
            local_var_files['mediacenters'] = params['mediacenters']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mediacenter/v1/import/mediacenters', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediacentersImportResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_organisations(self, organisations, **kwargs):  # noqa: E501
        """Import Organisations  # noqa: E501

        Import Organisations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_organisations(organisations, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organisations: (required)
        :return: OrganisationsImportResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.import_organisations_with_http_info(organisations, **kwargs)  # noqa: E501
        else:
            (data) = self.import_organisations_with_http_info(organisations, **kwargs)  # noqa: E501
            return data

    def import_organisations_with_http_info(self, organisations, **kwargs):  # noqa: E501
        """Import Organisations  # noqa: E501

        Import Organisations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_organisations_with_http_info(organisations, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organisations: (required)
        :return: OrganisationsImportResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organisations']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_organisations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organisations' is set
        if ('organisations' not in params or
                params['organisations'] is None):
            raise ValueError("Missing the required parameter `organisations` when calling `import_organisations`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'organisations' in params:
            local_var_files['organisations'] = params['organisations']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mediacenter/v1/import/organisations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganisationsImportResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_mediacenter_group(self, repository, mediacenter, group, **kwargs):  # noqa: E501
        """delete a group that is managed by the given mediacenter  # noqa: E501

        admin rights are required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_mediacenter_group(repository, mediacenter, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str mediacenter: authorityName of the mediacenter that should manage the group (required)
        :param str group: authorityName of the group that should not longer be managed by that mediacenter (required)
        :return: list[Group]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_mediacenter_group_with_http_info(repository, mediacenter, group, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_mediacenter_group_with_http_info(repository, mediacenter, group, **kwargs)  # noqa: E501
            return data

    def remove_mediacenter_group_with_http_info(self, repository, mediacenter, group, **kwargs):  # noqa: E501
        """delete a group that is managed by the given mediacenter  # noqa: E501

        admin rights are required.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_mediacenter_group_with_http_info(repository, mediacenter, group, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository: ID of repository (or \"-home-\" for home repository) (required)
        :param str mediacenter: authorityName of the mediacenter that should manage the group (required)
        :param str group: authorityName of the group that should not longer be managed by that mediacenter (required)
        :return: list[Group]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository', 'mediacenter', 'group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_mediacenter_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `remove_mediacenter_group`")  # noqa: E501
        # verify the required parameter 'mediacenter' is set
        if ('mediacenter' not in params or
                params['mediacenter'] is None):
            raise ValueError("Missing the required parameter `mediacenter` when calling `remove_mediacenter_group`")  # noqa: E501
        # verify the required parameter 'group' is set
        if ('group' not in params or
                params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `remove_mediacenter_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'mediacenter' in params:
            path_params['mediacenter'] = params['mediacenter']  # noqa: E501
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mediacenter/v1/mediacenter/{repository}/{mediacenter}/manages/{group}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Group]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
