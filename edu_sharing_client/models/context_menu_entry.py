# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ContextMenuEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'position': 'int',
        'icon': 'str',
        'name': 'str',
        'url': 'str',
        'is_disabled': 'bool',
        'open_in_new': 'bool',
        'is_separate': 'bool',
        'is_separate_bottom': 'bool',
        'only_desktop': 'bool',
        'only_web': 'bool',
        'mode': 'str',
        'scopes': 'list[str]',
        'ajax': 'bool',
        'group': 'str',
        'permission': 'str',
        'toolpermission': 'str',
        'is_directory': 'bool',
        'show_as_action': 'bool',
        'multiple': 'bool',
        'change_strategy': 'str'
    }

    attribute_map = {
        'position': 'position',
        'icon': 'icon',
        'name': 'name',
        'url': 'url',
        'is_disabled': 'isDisabled',
        'open_in_new': 'openInNew',
        'is_separate': 'isSeparate',
        'is_separate_bottom': 'isSeparateBottom',
        'only_desktop': 'onlyDesktop',
        'only_web': 'onlyWeb',
        'mode': 'mode',
        'scopes': 'scopes',
        'ajax': 'ajax',
        'group': 'group',
        'permission': 'permission',
        'toolpermission': 'toolpermission',
        'is_directory': 'isDirectory',
        'show_as_action': 'showAsAction',
        'multiple': 'multiple',
        'change_strategy': 'changeStrategy'
    }

    def __init__(self, position=None, icon=None, name=None, url=None, is_disabled=False, open_in_new=False, is_separate=False, is_separate_bottom=False, only_desktop=False, only_web=False, mode=None, scopes=None, ajax=False, group=None, permission=None, toolpermission=None, is_directory=False, show_as_action=False, multiple=False, change_strategy=None):  # noqa: E501
        """ContextMenuEntry - a model defined in Swagger"""  # noqa: E501
        self._position = None
        self._icon = None
        self._name = None
        self._url = None
        self._is_disabled = None
        self._open_in_new = None
        self._is_separate = None
        self._is_separate_bottom = None
        self._only_desktop = None
        self._only_web = None
        self._mode = None
        self._scopes = None
        self._ajax = None
        self._group = None
        self._permission = None
        self._toolpermission = None
        self._is_directory = None
        self._show_as_action = None
        self._multiple = None
        self._change_strategy = None
        self.discriminator = None
        if position is not None:
            self.position = position
        if icon is not None:
            self.icon = icon
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url
        if is_disabled is not None:
            self.is_disabled = is_disabled
        if open_in_new is not None:
            self.open_in_new = open_in_new
        if is_separate is not None:
            self.is_separate = is_separate
        if is_separate_bottom is not None:
            self.is_separate_bottom = is_separate_bottom
        if only_desktop is not None:
            self.only_desktop = only_desktop
        if only_web is not None:
            self.only_web = only_web
        if mode is not None:
            self.mode = mode
        if scopes is not None:
            self.scopes = scopes
        if ajax is not None:
            self.ajax = ajax
        if group is not None:
            self.group = group
        if permission is not None:
            self.permission = permission
        if toolpermission is not None:
            self.toolpermission = toolpermission
        if is_directory is not None:
            self.is_directory = is_directory
        if show_as_action is not None:
            self.show_as_action = show_as_action
        if multiple is not None:
            self.multiple = multiple
        if change_strategy is not None:
            self.change_strategy = change_strategy

    @property
    def position(self):
        """Gets the position of this ContextMenuEntry.  # noqa: E501


        :return: The position of this ContextMenuEntry.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ContextMenuEntry.


        :param position: The position of this ContextMenuEntry.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def icon(self):
        """Gets the icon of this ContextMenuEntry.  # noqa: E501


        :return: The icon of this ContextMenuEntry.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this ContextMenuEntry.


        :param icon: The icon of this ContextMenuEntry.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def name(self):
        """Gets the name of this ContextMenuEntry.  # noqa: E501


        :return: The name of this ContextMenuEntry.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContextMenuEntry.


        :param name: The name of this ContextMenuEntry.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this ContextMenuEntry.  # noqa: E501


        :return: The url of this ContextMenuEntry.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ContextMenuEntry.


        :param url: The url of this ContextMenuEntry.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def is_disabled(self):
        """Gets the is_disabled of this ContextMenuEntry.  # noqa: E501


        :return: The is_disabled of this ContextMenuEntry.  # noqa: E501
        :rtype: bool
        """
        return self._is_disabled

    @is_disabled.setter
    def is_disabled(self, is_disabled):
        """Sets the is_disabled of this ContextMenuEntry.


        :param is_disabled: The is_disabled of this ContextMenuEntry.  # noqa: E501
        :type: bool
        """

        self._is_disabled = is_disabled

    @property
    def open_in_new(self):
        """Gets the open_in_new of this ContextMenuEntry.  # noqa: E501


        :return: The open_in_new of this ContextMenuEntry.  # noqa: E501
        :rtype: bool
        """
        return self._open_in_new

    @open_in_new.setter
    def open_in_new(self, open_in_new):
        """Sets the open_in_new of this ContextMenuEntry.


        :param open_in_new: The open_in_new of this ContextMenuEntry.  # noqa: E501
        :type: bool
        """

        self._open_in_new = open_in_new

    @property
    def is_separate(self):
        """Gets the is_separate of this ContextMenuEntry.  # noqa: E501


        :return: The is_separate of this ContextMenuEntry.  # noqa: E501
        :rtype: bool
        """
        return self._is_separate

    @is_separate.setter
    def is_separate(self, is_separate):
        """Sets the is_separate of this ContextMenuEntry.


        :param is_separate: The is_separate of this ContextMenuEntry.  # noqa: E501
        :type: bool
        """

        self._is_separate = is_separate

    @property
    def is_separate_bottom(self):
        """Gets the is_separate_bottom of this ContextMenuEntry.  # noqa: E501


        :return: The is_separate_bottom of this ContextMenuEntry.  # noqa: E501
        :rtype: bool
        """
        return self._is_separate_bottom

    @is_separate_bottom.setter
    def is_separate_bottom(self, is_separate_bottom):
        """Sets the is_separate_bottom of this ContextMenuEntry.


        :param is_separate_bottom: The is_separate_bottom of this ContextMenuEntry.  # noqa: E501
        :type: bool
        """

        self._is_separate_bottom = is_separate_bottom

    @property
    def only_desktop(self):
        """Gets the only_desktop of this ContextMenuEntry.  # noqa: E501


        :return: The only_desktop of this ContextMenuEntry.  # noqa: E501
        :rtype: bool
        """
        return self._only_desktop

    @only_desktop.setter
    def only_desktop(self, only_desktop):
        """Sets the only_desktop of this ContextMenuEntry.


        :param only_desktop: The only_desktop of this ContextMenuEntry.  # noqa: E501
        :type: bool
        """

        self._only_desktop = only_desktop

    @property
    def only_web(self):
        """Gets the only_web of this ContextMenuEntry.  # noqa: E501


        :return: The only_web of this ContextMenuEntry.  # noqa: E501
        :rtype: bool
        """
        return self._only_web

    @only_web.setter
    def only_web(self, only_web):
        """Sets the only_web of this ContextMenuEntry.


        :param only_web: The only_web of this ContextMenuEntry.  # noqa: E501
        :type: bool
        """

        self._only_web = only_web

    @property
    def mode(self):
        """Gets the mode of this ContextMenuEntry.  # noqa: E501


        :return: The mode of this ContextMenuEntry.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ContextMenuEntry.


        :param mode: The mode of this ContextMenuEntry.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def scopes(self):
        """Gets the scopes of this ContextMenuEntry.  # noqa: E501


        :return: The scopes of this ContextMenuEntry.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this ContextMenuEntry.


        :param scopes: The scopes of this ContextMenuEntry.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Render", "Search", "CollectionsReferences", "CollectionsCollection", "WorkspaceList", "WorkspaceTree", "Oer", "CreateMenu"]  # noqa: E501
        if not set(scopes).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `scopes` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(scopes) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._scopes = scopes

    @property
    def ajax(self):
        """Gets the ajax of this ContextMenuEntry.  # noqa: E501


        :return: The ajax of this ContextMenuEntry.  # noqa: E501
        :rtype: bool
        """
        return self._ajax

    @ajax.setter
    def ajax(self, ajax):
        """Sets the ajax of this ContextMenuEntry.


        :param ajax: The ajax of this ContextMenuEntry.  # noqa: E501
        :type: bool
        """

        self._ajax = ajax

    @property
    def group(self):
        """Gets the group of this ContextMenuEntry.  # noqa: E501


        :return: The group of this ContextMenuEntry.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this ContextMenuEntry.


        :param group: The group of this ContextMenuEntry.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def permission(self):
        """Gets the permission of this ContextMenuEntry.  # noqa: E501


        :return: The permission of this ContextMenuEntry.  # noqa: E501
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this ContextMenuEntry.


        :param permission: The permission of this ContextMenuEntry.  # noqa: E501
        :type: str
        """

        self._permission = permission

    @property
    def toolpermission(self):
        """Gets the toolpermission of this ContextMenuEntry.  # noqa: E501


        :return: The toolpermission of this ContextMenuEntry.  # noqa: E501
        :rtype: str
        """
        return self._toolpermission

    @toolpermission.setter
    def toolpermission(self, toolpermission):
        """Sets the toolpermission of this ContextMenuEntry.


        :param toolpermission: The toolpermission of this ContextMenuEntry.  # noqa: E501
        :type: str
        """

        self._toolpermission = toolpermission

    @property
    def is_directory(self):
        """Gets the is_directory of this ContextMenuEntry.  # noqa: E501


        :return: The is_directory of this ContextMenuEntry.  # noqa: E501
        :rtype: bool
        """
        return self._is_directory

    @is_directory.setter
    def is_directory(self, is_directory):
        """Sets the is_directory of this ContextMenuEntry.


        :param is_directory: The is_directory of this ContextMenuEntry.  # noqa: E501
        :type: bool
        """

        self._is_directory = is_directory

    @property
    def show_as_action(self):
        """Gets the show_as_action of this ContextMenuEntry.  # noqa: E501


        :return: The show_as_action of this ContextMenuEntry.  # noqa: E501
        :rtype: bool
        """
        return self._show_as_action

    @show_as_action.setter
    def show_as_action(self, show_as_action):
        """Sets the show_as_action of this ContextMenuEntry.


        :param show_as_action: The show_as_action of this ContextMenuEntry.  # noqa: E501
        :type: bool
        """

        self._show_as_action = show_as_action

    @property
    def multiple(self):
        """Gets the multiple of this ContextMenuEntry.  # noqa: E501


        :return: The multiple of this ContextMenuEntry.  # noqa: E501
        :rtype: bool
        """
        return self._multiple

    @multiple.setter
    def multiple(self, multiple):
        """Sets the multiple of this ContextMenuEntry.


        :param multiple: The multiple of this ContextMenuEntry.  # noqa: E501
        :type: bool
        """

        self._multiple = multiple

    @property
    def change_strategy(self):
        """Gets the change_strategy of this ContextMenuEntry.  # noqa: E501


        :return: The change_strategy of this ContextMenuEntry.  # noqa: E501
        :rtype: str
        """
        return self._change_strategy

    @change_strategy.setter
    def change_strategy(self, change_strategy):
        """Sets the change_strategy of this ContextMenuEntry.


        :param change_strategy: The change_strategy of this ContextMenuEntry.  # noqa: E501
        :type: str
        """
        allowed_values = ["update", "remove"]  # noqa: E501
        if change_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `change_strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(change_strategy, allowed_values)
            )

        self._change_strategy = change_strategy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContextMenuEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContextMenuEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
