# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.  # noqa: E501

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Register(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'local': 'bool',
        'recover_password': 'bool',
        'login_url': 'str',
        'recover_url': 'str',
        'required_fields': 'list[str]'
    }

    attribute_map = {
        'local': 'local',
        'recover_password': 'recoverPassword',
        'login_url': 'loginUrl',
        'recover_url': 'recoverUrl',
        'required_fields': 'requiredFields'
    }

    def __init__(self, local=False, recover_password=False, login_url=None, recover_url=None, required_fields=None):  # noqa: E501
        """Register - a model defined in Swagger"""  # noqa: E501
        self._local = None
        self._recover_password = None
        self._login_url = None
        self._recover_url = None
        self._required_fields = None
        self.discriminator = None
        if local is not None:
            self.local = local
        if recover_password is not None:
            self.recover_password = recover_password
        if login_url is not None:
            self.login_url = login_url
        if recover_url is not None:
            self.recover_url = recover_url
        if required_fields is not None:
            self.required_fields = required_fields

    @property
    def local(self):
        """Gets the local of this Register.  # noqa: E501


        :return: The local of this Register.  # noqa: E501
        :rtype: bool
        """
        return self._local

    @local.setter
    def local(self, local):
        """Sets the local of this Register.


        :param local: The local of this Register.  # noqa: E501
        :type: bool
        """

        self._local = local

    @property
    def recover_password(self):
        """Gets the recover_password of this Register.  # noqa: E501


        :return: The recover_password of this Register.  # noqa: E501
        :rtype: bool
        """
        return self._recover_password

    @recover_password.setter
    def recover_password(self, recover_password):
        """Sets the recover_password of this Register.


        :param recover_password: The recover_password of this Register.  # noqa: E501
        :type: bool
        """

        self._recover_password = recover_password

    @property
    def login_url(self):
        """Gets the login_url of this Register.  # noqa: E501


        :return: The login_url of this Register.  # noqa: E501
        :rtype: str
        """
        return self._login_url

    @login_url.setter
    def login_url(self, login_url):
        """Sets the login_url of this Register.


        :param login_url: The login_url of this Register.  # noqa: E501
        :type: str
        """

        self._login_url = login_url

    @property
    def recover_url(self):
        """Gets the recover_url of this Register.  # noqa: E501


        :return: The recover_url of this Register.  # noqa: E501
        :rtype: str
        """
        return self._recover_url

    @recover_url.setter
    def recover_url(self, recover_url):
        """Sets the recover_url of this Register.


        :param recover_url: The recover_url of this Register.  # noqa: E501
        :type: str
        """

        self._recover_url = recover_url

    @property
    def required_fields(self):
        """Gets the required_fields of this Register.  # noqa: E501


        :return: The required_fields of this Register.  # noqa: E501
        :rtype: list[str]
        """
        return self._required_fields

    @required_fields.setter
    def required_fields(self, required_fields):
        """Sets the required_fields of this Register.


        :param required_fields: The required_fields of this Register.  # noqa: E501
        :type: list[str]
        """

        self._required_fields = required_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Register, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Register):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
